@cindex supports

The @process{Supp} process handle @actor{Publisher} queries about supports.
A score is computed for each local support, based on its age (@math{t}).
However if support wasn't checked recently (@code{checkTTL}) its score is set to 0 as it is supposed to be corrupted or lost;

@image{mediatex-figures/score1,,,,}

@math{t <= T: score = ({T-t \over T})^{-a} *(M-b))+b} @*
@math{t > T: score = ({1 + c*(t-T)}^{-1}) * b} @*

where: (default values)
@table @math
@item T = 10 years
is the support time to live (@code{suppTTL})
@item t
is the current support age
@item a = 2 
power that reduce score from age of supports  (@code{powSupp})
@item M = 10.00
the maximum score (@code{maxScore})
@item b = 1.00
maximum score for outdated supports (@code{badScore})
@item c = 2
factor that reduce score of out-dated supports (@code{factSupp})
@end table

@note{} with the default values this gives: @*
@math{t <= T: score = (\sqrt{T-t \over T} *(9))+1} @*
@math{t > T: score = {1 \over 1 + 2*(t-T)}} @*

@note: 
@itemize @bullet
@item 
The same formula apply for local and shared scores (respectively given by @code{@eventClientSuppList{}} or written into @dataServersO file). So theses parameters appears both into @dataConfO and @dataServersO{}.
@item 
for support's files, the score is constant and given by the @code{fileScore} parameter from @dataConfO file was checked recently (@code{fileTTL}), else score is set to 0 as it it supposed to be deleted from the file-system.
@end itemize

Process conceptual model:

@image{mediatex-figures/supp,,,,}

@itemize @bullet
@item Events in
@table @code

@item @eventClientSuppList
@itemx @eventClientSuppAdd
@itemx @eventClientSuppFileAdd
@itemx @eventClientSuppDel
@itemx @eventClientSuppNote
@itemx @eventClientSuppCheck
from @actorPublisher{}: manage local supports.

@end table
@item Processing
@itemize @bullet

@item 
Manage supports information related to the @dataSupp file.
@item
Automatically withdraw a support from all collection on removal.
@item
When @actorPublisherO{} provides a support, ensure the @activityServer{} may work with it. 

@end itemize
@item Events out
@table @code

@item @eventClientConfWithdrawSuppCall
to @procClientConf{}: withdraw a local supports from collections.

@item @eventScriptsMount
@itemx @eventScriptsUmount
to @procScriptsMount{}: manage mounting @iso devices.

@item @eventServerHaveQuery
to @procServerHave{}: tels @activityServerO{} a support is now available.

@end table
@item Data in/out
@itemize @bullet
@item @dataConf
@item @dataSupp
@item @dataServers
@end itemize
@end itemize

Examples:
@itemize @bullet
@item Manage supports: @pxref{Scenario 1}.
@end itemize

Code:
@table @file
@item src/common/upgrade.c
@itemx src/client/supp.c
@end table
