@cindex OAIS

@menu
* Exemple::     Archiving icons
* Firewall::    Configuration behind a firewall
* CvsLogs::     Search the metadata history
* Portail::	Minimal Php inerface
* Linking::	Library API
@end menu

@sc{Mediatex} should help building a whole @sc{oais} system.
@itemize @bullet
@item 
It manage redundancy, consistency and unitary access.
@item 
It divides the application complexity 
as the ``Administration'' and ``Preservation planing'' functionality
are already taken into account for many features.
@end itemize

@node Exemple
@section Archiving icons
@cindex Example

Testing @mediatex{} with about 50000 archives. 
@note{} this example last very long time and consequently shows actual limits of @mediatexO{}.

Download the Open Icons Library and build the related catalog and extraction rules files.
@example
$ /usr/share/mediatex/examples/example.sh
@end example

If not already done, please configure the @code{mdtx-hello} collection: @pxref{Scenario 2}.

Empty the catalog and extraction meta-data files:
@example
$ cat /dev/null > ~mdtx-hello/cvs/catalog000.txt
$ cat /dev/null > ~mdtx-hello/cvs/extract000.txt
$ mediatex upgrade
@end example

Uploading the icons and build the @acronym{HTML} catalog:
@example
$ mediatex upload++ file download as OpenIconsLibrary.tbz \
   catalog icons.cat rules icons.ext to coll hello
@end example

Browses the icons catalog via this @sc{url}: @*
@url{https://localhost/~mdtx-hello}, using @code{mdtx} log-in and the password you provide before.

The first time you request for an archive, it take long time to extract it from this big @acronym{TBZ} container. 
To speed up the audit process that simulate all archive retrieval, first manually extract all archives from the @acronym{TBZ} container:
@example
# /etc/init.d/mediatexd stop
$ mediatex su
$ cd ~/cache/mdtx-hello
$ tar -jxf OpenIconsLibrary.tbz
# /etc/init.d/mediatexd start
@end example

@todo{} still in development.

The server will take too long time to scan the cache directory (I guess because of records managed into a list instead of a hash-table).

Audit the collection:
@example
$ mediatex audit coll hello for @var{email_address}
$ mediatex srv extract
# tail -f /var/log/mediatex
@end example

You should be notified by mail that the audit report is uploaded to the collection.

@node Firewall
@section Configuration behind a firewall
@cindex Firewall

This configuration is needed when you cannot install mediatex on the
router of your private network
(the bellow configuration cannot serves collections hosted on the true gateway as @file{ssh/config} file cannot handle 2 ports for the same hostname).

Mediatex must be configured as if it was hosted on the gateway.

@file{/etc/mediatex/mdtx.conf}:
@example
host     GW
mdtxPort 6562
sshPort  2222
wwwPort  4443
@end example

@code{iptables} rules for GATEWAY:
@example
-t nat -A PREROUTING -p tcp --dport 2222 -j DNAT --to $HOST:22
-t nat -A PREROUTING -p tcp --dport 4443 -j DNAT --to $HOST:443
-t nat -A PREROUTING -p tcp --dport 6562 -j DNAT --to $HOST:6562
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 22 -j ACCEPT
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 443 -j ACCEPT
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 6562 -j ACCEPT
@end example

Locally if your server own collections, you will have to skip the gateway.
(GW must match the gateway's IP address on the WWW_NET interface)

@code{iptables} rules for HOST:
@example
-t nat -A OUTPUT -p tcp -d $GW --dport 2222 -j DNAT --to $HOST:22
-t nat -A OUTPUT -p tcp -d $GW --dport 4443 -j DNAT --to $HOST:443
-t nat -A OUTPUT -p tcp -d $GW --dport 6561 -j DNAT --to $HOST:6561
@end example

@file{~mdtx-coll/public_html/.htaccess}
@example
# force https
RewriteEngine On
RewriteCond %@{SERVER_PORT@} !^4443$
RewriteCond %@{SERVER_PORT@} !^443$
RewriteRule .* https://%@{HTTP_HOST@}%@{REQUEST_URI@} [QSA,R=301,L]
@end example

@node CvsLogs
@section Search the metadata history

Actually, this spend a lot of ressources :
@example
#!/bin/bash
#set -x
set -e

if [ $# -lt 1 ]; then
    echo "usage: "
    echo " $ mediates su coll COLLECTION"
    echo " $ cd ~/cvs"
    echo " $ PATH/$0 KEYWORD"
    exit
fi

echo "looking for '$1' into cvs history"

for DIR in $(find . -type d | grep -v '/CVS$'); do

 for LINE in $(cat $DIR/CVS/Entries | 
     cut -d" " -f1 | grep -v "^D" | grep -v /1.1.1.1/); do
  FILE=$(echo $LINE | cut -d"/" -f2)
  VMAX=$(echo $LINE | cut -d"/" -f3 | cut -d"." -f2)
  [ $VMAX -gt 1 ] || continue

  for VER in $(seq 2 $VMAX); do
   if [ $(cvs diff -r 1.$[$VER - 1] -r 1.$VER $FILE 2>/dev/null | 
	       grep -c "$1") -gt 0 ]; then
    echo "$FILE 1.$VER"
   fi

  done
 done
done
@end example

Changelog on metadata files should be retrieve quicker from the @acronym{CVS} modules.
@example
$ awk -vRS= '/Document "13421830"/' catalog*.txt
$ grep 13421830 catalog*,v.txt
$ cvs diff -r1.1 catalog???.txt | grep '/Document "13421830"/'
@end example

Git do it very much more quickly, but we loose the revisions numbers:
@example
# apt-get install git-cvs
$ git cvsimport -d /var/lib/mediatex/mdtx mdtx-hello
$ git log -S 'panthere'
commit <COMMIT_NUMBER>
$ git diff <COMMIT_NUMBER>
@end example

@page
@node Portail
@section Minimal Php inerface
@cindex Use case

A minimal @sc{cakePhp} application is provided with the sources
(@file{/usr/@/share/@/mediatex/@/useCases/@/cake.tgz}),
showing how to use the @sc{Mediatex} system as a storage layer.

@image{mediatex-figures/useCase,,,,}

There are only 4 interactions from the @acronym{CAKE}'s models and view:
@table @file
@item cake/models/user.php
Add a user 
@example
function beforeSave() @{
  $cmd = "/var/www/cake/ingest.sh user ".
    $this->data['User']['username']." ".
    $this->data['User']['passwd'];
  system($cmd, $retval);
  return ($retval == 0);
@}
@end example
@item cake/models/node.php
Add a directory or a file
@example
function beforeSave() @{
  $father = $this->find('first', 
     array('conditions' => array('Node.id' => 
      $this->data['Node']['node_id'])));

  switch($this->data['Node']['type']) @{
  case 1:
    $cmd = "/var/www/cake/ingest.sh dir ".
      $this->data['Node']['name']." ".
      $father['Node']['name'];
    break;

  case 2:
@dots{}
    $cmd = "/var/www/cake/ingest.sh file ".
      $this->data['Node']['username']." ".
      $this->data['Node']['name']." ".
      $father['Node']['name']." ".
      $path;
    break;
@dots{}
  @}
  
  system($cmd, $retval);
  return ($retval == 0);
@} 
@end example
@item cake/views/nodes/view.ctp
@acronym{CAKE} view points on the @mediatexO{} @acronym{URL}.
@example
@dots{}
echo $html->link($fils['name'], 
                 'https://@var{HOSTNAME}/~mdtx-cake/cgi/get.cgi'.
                 $fils['url']);
@dots{}
@end example
@end table

The @file{cake/ingest.sh} manage theses 3 ingestion's actions
@example
function addUser()
@{
  CYPHER=$(printf "$LOGIN:$COLLECTION:$PASSWD" | md5sum | cut -d' ' -f1)
  LINE="$LOGIN:$COLLECTION:$CYPHER"
  echo $LINE >> $PWD_FILE
  sed $GRP_FILE -i -e "s/^\(.*\)$/\1 $LOGIN/"

  cat >>$CAT_FILE <<EOF
Human    "$LOGIN" ""
EOF
@}

function addDir()
@{
  cat >>$CAT_FILE <<EOF
top Category "$NAME": "$FATHER"
EOF
  mediatex upgrade coll $COLL
@}

function addFile()
@{
  HASH=$(md5sum $TEMP | cut -d' ' -f1)
  SIZE=$(ls -l $TEMP | awk '@{print $5@}')

  mediatex upload $TEMP to coll $COLL

  cat >>$CAT_FILE <<EOF
Document "$NAME": "$FATHER"
  with "uploader" = "$LOGIN" ""
  $HASH:$SIZE
EOF

  mediatex upgrade coll $COLL
@}
@end example

To be fully operational, this implementation lakes a process to recover the database from @mediatexO{}. This is the purpose of the following section.

@node Linking
@section Library API
@cindex C library
@cindex SQL

@cindex Library
@cindex Linking
One other possibility is to link with the @mediatexO{}'s library,
using the parsers in order to write your own steriliser that
converts @mediatexO{}'s input to your @acronym{OAIS}'s data management
input format:
@itemize @bullet
@item for the ingestion process
@item in order to give back all the meta-data
@end itemize

The @file{/usr/@/share/@/mediatex/@/useCases/@/txt2sql.c} 
file is provided as an example.
It convert all the collection's meta-data to an @acronym{SQL} script:
@example
#include "mediatex.h"
#include "client/commonHtml.h"
#include "client/catalogHtml.h"

#include <locale.h>

/*==================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program
 * Output     : N/A
 ==================================================================*/
static void 
usage(char* programName)
@{
  mdtxUsage(programName);
  fprintf(stderr, "\n\t\tlabel");
  mdtxOptions();
  fprintf(stderr, "  ---\n  label:\t\tcollection's label");
  return;
@}

/*==================================================================
 * Function   : main 
 * Description: Example using libmediatex
 * Synopsis   : ./text2sql
 * Input      : stdin
 * Output     : stdout
 ==================================================================*/
int 
main(int argc, char** argv)
@{
  Collection* coll = NULL;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = MDTX_SHORT_OPTIONS;
  struct option longOptions[] = @{
    MDTX_LONG_OPTIONS,
    @{0, 0, 0, 0@}
  @};

  setlocale (LC_ALL, "");
  // so as printf do not write comma in float
  setlocale(LC_NUMERIC, "C"); 

  // import mdtx environment
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, NULL)) 
        != EOF) @{
    switch(cOption) @{
      
      GET_MDTX_OPTIONS; // generic options
    @}
    if (rc) goto optError;
  @}

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;
 
  /*******************************************************************/
  if (argc == optind) @{
    usage; // expect a collection label as first parameter
    goto optError;
  @}

  logEmit(LOG_INFO, "** txt2sql: %s **", argv[optind]);

  if (!(coll = mdtxGetCollection(argv[optind]))) goto error;
  if (!loadCollection(coll, SERV|CTLG|EXTR)) goto error;
  // DO YOUR EXPORT HERE
  if (!releaseCollection(coll, SERV|CTLG|EXTR)) goto error;
  /*******************************************************************/

  rc = TRUE;
 error:
  freeConfiguration();
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
@}
@end example


