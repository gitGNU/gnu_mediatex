@cindex OAIS

@menu
* Example::     Archiving icons
* Firewall::    Configuration behind a firewall
* GitLogs::     Search the metadata history
* HTTP::        Configure HTTP
* DNS::         Configure DNS
* Portail::	Minimal Php inerface
* Linking::	Library API
@end menu

@sc{Mediatex} should help building a whole @sc{oais} system.
@itemize @bullet
@item 
It manage redundancy, consistency and unitary access.
@item 
It divides the application complexity 
as the ``Administration'' and ``Preservation planing'' functionality
are already taken into account for many features.
@end itemize

@file{exemples} directory also provides 2 sub-project :
@itemize @bullet
@item @acronym{jukebox}: a @iso{} builder that automate most of the @actorPublisher{}'s job.
@item @acronym{sso}: a single-sign-on solution for mediatex.
@end itemize

@node Example
@section Archiving icons
@cindex Example

Testing @mediatex{} with about 50,000 archives. 

Download the Open Icons Library and build the related catalog and extraction rules files.
This last about 15 minutes.
@example
$ /usr/share/mediatex/examples/example.sh
@end example

If not already done, please configure the @code{mdtx-hello} collection: @pxref{Scenario 2}.

Grow the cache size by modifying @file{/etc/mediatex/mdtx.conf}
@example
# default cache parameters
cacheSize  1 Go
@end example

Empty the catalog and extraction meta-data files:
@example
$ cat /dev/null > ~mdtx-hello/git/catalog000.txt
$ cat /dev/null > ~mdtx-hello/git/extract000.txt
$ mediatex upgrade+
@end example

Uploading the icons and build the @acronym{HTML} catalog:
@example
$ mediatex upload++ file open_icon_library-standard.tar.gz \
   catalog icons.cat rules icons.ext to coll hello
@end example

Archive are now injected. You can browses the icons catalog at this @sc{url}: @*
@url{https://localhost/~mdtx-hello}, using @code{mdtx} login and the password you provide before. Now @mediatex{} should be able to help you conserving or migrating theses archives. 

The audit process show bellow is not requiered but only provides a way to double check all goes wright (@mediatex{} already do that by providing a score for collections).

It take time to extract archives from this big @acronym{TAR} container. 
To speed up the audit process that simulate all archive retrieval, you can first manually extract all archives:
@example
# /etc/init.d/mediatexd stop
$ mediatex su
$ cd ~mdtx/cache/mdtx-hello
$ tar -zxf 2016-06/OpenIconsLibrary.tar.gz
# /etc/init.d/mediatexd start
@end example

The server will take too long time to scan the cache directory when (re-)starting. (This should become optional in further versions).
This last about 4 minutes.

Audit the collection:
@example
$ mediatex audit coll hello for @var{email_address}
$ mediatex srv extract
# tail -f /var/log/mediatex
@end example

You should be notified by mail that the audit report is uploaded to the collection. The audit process is not optimized and probably will not. This last about 4 hours.
@node Firewall
@section Configuration behind a firewall
@cindex Firewall

This configuration is needed when you cannot install mediatex on the
router of your private network
(the bellow configuration cannot serves collections hosted on the true gateway as @file{ssh/config} file cannot handle 2 ports for the same hostname).

Mediatex must be configured as if it was hosted on the gateway.

@file{/etc/mediatex/mdtx.conf}:
@example
host     GW
mdtxPort 6562
sshPort  2222
wwwPort  4443
@end example

@code{iptables} rules for GATEWAY:
@example
-t nat -A PREROUTING -p tcp --dport 2222 -j DNAT --to $HOST:22
-t nat -A PREROUTING -p tcp --dport 4443 -j DNAT --to $HOST:443
-t nat -A PREROUTING -p tcp --dport 6562 -j DNAT --to $HOST:6562
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 22 -j ACCEPT
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 443 -j ACCEPT
-A FORWARD -i $WWW_NET -o $LOCAL_NET -p tcp --dport 6562 -j ACCEPT
@end example

Locally if your server own collections, you will have to skip the gateway.
(GW must match the gateway's IP address on the WWW_NET interface)

@code{iptables} rules for HOST:
@example
-t nat -A OUTPUT -p tcp -d $GW --dport 2222 -j DNAT --to $HOST:22
-t nat -A OUTPUT -p tcp -d $GW --dport 4443 -j DNAT --to $HOST:443
-t nat -A OUTPUT -p tcp -d $GW --dport 6561 -j DNAT --to $HOST:6561
@end example

@file{~mdtx-coll/public_html/.htaccess}
@example
# force https
RewriteEngine On
RewriteCond %@{SERVER_PORT@} !^4443$
RewriteCond %@{SERVER_PORT@} !^443$
RewriteRule .* https://%@{HTTP_HOST@}%@{REQUEST_URI@} [QSA,R=301,L]
@end example

@node GitLogs
@section Search the meta-data history

@acronym{GIT} allows to quickly search text into the meta-data whole history:
@example
$ git log -S 'panthere'
commit <COMMIT_NUMBER>
$ git diff <COMMIT_NUMBER>
@end example

@node HTTP
@section Configure HTTP
@cindex Upload

Default is to use @acronym{HTTPS} for the catalogue's @acronym{URL}s.
But @acronym{HTTP} can be used instead : @dataServers
@example
https      no
@end example

However, both @acronym{HTTPS} and @acronym{HTTP} remain reachable.
You can force @acronym{HTTPS} access if needed:
@file{/etc/@/mediatex/@/mdtx-@var{COLL}/@/apache2/@/home.htaccess}
@example
# uncomment to force https (no more http available)
SSLOptions +StrictRequire
SSLRequireSSL
@end example

Default is to protect contents by passwords.
You can disable them if no more wanted: @file{/etc/@/mediatex/@/mdtx-@var{COLL}/@/apache2/@/home.htaccess}
@example
# uncomment to disable authentication
SetEnvIf Request_Protocol "^H" NO_AUTH
@end example

Default is to disallow @code{www-data} user to lunch @mediatexO queries.
However allowing him make possible to upload files via a dedicated @acronym{cgi} script shown on ``cache'' section of the @acronym{HTML} catalogue.
@example
# mediatex adm add user www-data
$ mediatex make
@end example
This extra feature remains protected by password even if authentication is disabled as shown before. The final query lauched by the @code{www-data} user is configurable into the @file{/etc/@/mediatex/@/mdtx-@var{COLL}/@/put.sh} script.
@example
QUERY="mediatex upload++"
@end example

@node DNS
@section Configure DNS
@cindex Round-Robbin

@itemize
@item
The following @acronym{bind9} configuration provides severals @ip{} addresses for a unique domain name. 

@file{/etc/bind/db.@var{domain-name}}
@example
; round-robin
rr1   	IN	A	@var{IP-1-1}
rr1   	IN	A	@var{IP-1-2}
...
rr1   	IN	A	@var{IP-1-N}

dn1	IN	CNAME	rr1.@var{domain-name}.
@end example

This domaine name is used by @mediatexO{} @web{} interface. For instance, clicking on the logo will resolve this domain name.

@file{~mdtx-@var{coll}/git/servers.txt}
@example
dnsHost    dn1.@var{domain-name}
@end example

@item
This second @acronym{bind9} configuration dupplicate the first one in ordr to provide several pool of servers.

@file{/etc/bind/db.@var{domain-name}}
@example
dn1	IN	CNAME	rr1.@var{domain-name}.
dn2	IN	CNAME	rr2.@var{domain-name}.
@dots{}
dnN	IN	CNAME	rrN.@var{domain-name}.

www     IN      CNAME   ns.@var{domain-name}.
@end example

This may be usesefull if a mediatex instance is not enought to handle all collections.
The @acronym{Apache} configuration will distribute a uniq main domain (www.@var{domain-name}) name to several @mediatex{} instances, by maping collection's name to target domain names:

@itemize
@item
@example
$ cat >map.txt <<EOF
@var{coll1} dn1
@var{coll2} dn1
@dots{}
@var{collX} dn2
@dots{}
@var{collY} dnN
EOF
# httxt2dbm -i map.txt -o map.map
# chown www-data. map.*
@end example

@item
@file{/etc/apache2/sites-enabled/000-default.conf}
@example
RewriteEngine On
RewriteCond %@{HTTP_HOST@}   ^www\.(.+)$ [NC]
RewriteMap dn "dbm:/etc/apache2/map.map"
RewriteRule "/~mdtx-([^/]*)(.*)" "http://$@{dn:$1@}.%1/~mdtx-$1$2"
@end example

So @urlO{}s like @code{http://www.@var{domain-name}/~mdtx-@var{collX}/@dots{}}
will be maped to
@code{http://dn2.@var{domain-name}/~mdtx-@var{collX}/@dots{}}.

@end itemize
@end itemize

@page
@node Portail
@section Minimal Php inerface
@cindex Use case

A minimal @sc{cakePhp} application is provided with the sources
(@file{/usr/@/share/@/mediatex/@/useCases/@/cake.tgz}),
showing how to use the @sc{Mediatex} system as a storage layer.

@note Not tested for a while

@image{mediatex-figures/useCase,,,,}

There are only 4 interactions from the @acronym{CAKE}'s models and view:
@table @file
@item cake/models/user.php
Add a user 
@example
function beforeSave() @{
  $cmd = "/var/www/cake/ingest.sh user ".
    $this->data['User']['username']." ".
    $this->data['User']['passwd'];
  system($cmd, $retval);
  return ($retval == 0);
@}
@end example
@item cake/models/node.php
Add a directory or a file
@example
function beforeSave() @{
  $father = $this->find('first', 
     array('conditions' => array('Node.id' => 
      $this->data['Node']['node_id'])));

  switch($this->data['Node']['type']) @{
  case 1:
    $cmd = "/var/www/cake/ingest.sh dir ".
      $this->data['Node']['name']." ".
      $father['Node']['name'];
    break;

  case 2:
@dots{}
    $cmd = "/var/www/cake/ingest.sh file ".
      $this->data['Node']['username']." ".
      $this->data['Node']['name']." ".
      $father['Node']['name']." ".
      $path;
    break;
@dots{}
  @}
  
  system($cmd, $retval);
  return ($retval == 0);
@} 
@end example
@item cake/views/nodes/view.ctp
@acronym{CAKE} view points on the @mediatexO{} @acronym{URL}.
@example
@dots{}
echo $html->link($fils['name'], 
                 'https://@var{HOSTNAME}/~mdtx-cake/cgi/get.cgi'.
                 $fils['url']);
@dots{}
@end example
@end table

The @file{cake/ingest.sh} manage theses 3 ingestion's actions
@example
function addUser()
@{
  CYPHER=$(printf "$LOGIN:$COLLECTION:$PASSWD" | md5sum | cut -d' ' -f1)
  LINE="$LOGIN:$COLLECTION:$CYPHER"
  echo $LINE >> $PWD_FILE
  sed $GRP_FILE -i -e "s/^\(.*\)$/\1 $LOGIN/"

  cat >>$CAT_FILE <<EOF
Human    "$LOGIN" ""
EOF
@}

function addDir()
@{
  cat >>$CAT_FILE <<EOF
top Category "$NAME": "$FATHER"
EOF
  mediatex upgrade coll $COLL
@}

function addFile()
@{
  HASH=$(md5sum $TEMP | cut -d' ' -f1)
  SIZE=$(ls -l $TEMP | awk '@{print $5@}')

  mediatex upload $TEMP to coll $COLL

  cat >>$CAT_FILE <<EOF
Document "$NAME": "$FATHER"
  with "uploader" = "$LOGIN" ""
  $HASH:$SIZE
EOF

  mediatex upgrade coll $COLL
@}
@end example

To be fully operational, this implementation lakes a process to recover the database from @mediatexO{}. This is the purpose of the following section.

@node Linking
@section Library API
@cindex C library
@cindex SQL
@cindex XML
@cindex SEDA

@cindex Library
@cindex Linking
One other possibility is to link with the @mediatexO{}'s library,
using its @acronym{API} to write your own parser, and the mediatex parsers write your own serialiser.

The @file{/usr/@/share/@/mediatex/@/examples/@/seda-0.2.tgz} project
provide such examples.
It import meta-data from an @acronym{XML} file and export them into a @acronym{SQL} script.

Bellow show how the main functions linked with mediatex are:
@example
#include "mediatex.h"
#include "client/commonHtml.h"
#include "client/catalogHtml.h"

#include <locale.h>

/*==================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program
 * Output     : N/A
 ==================================================================*/
static void 
usage(char* programName)
@{
  mdtxUsage(programName);
  fprintf(stderr, "\n\t\t-i label");
  mdtxOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --label\t\tcollection's label\n");
  return;
@}

/*==================================================================
 * Function   : main 
 * Description: Example using libmediatex
 * Synopsis   : ./text2sql
 * Input      : stdin
 * Output     : stdout
 ==================================================================*/
int 
main(int argc, char** argv)
@{
  Collection* coll = 0;
  char* label = 0;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = MDTX_SHORT_OPTIONS"i:";
  struct option longOptions[] = @{
    @{"label", required_argument, 0, 'i'@},
    MDTX_LONG_OPTIONS,             
    @{0, 0, 0, 0@}                 
  @};

  setlocale (LC_ALL, "");
  // so as printf do not write comma in float
  setlocale(LC_NUMERIC, "C"); 

  // import mdtx environment
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, NULL)) 
        != EOF) @{
    switch(cOption) @{
      
    case 'i':
      label = optarg;
      break;

      GET_MDTX_OPTIONS; // generic options
    @}
    if (rc) goto optError;
  @}

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;
 
  /*******************************************************************/
  logEmit(LOG_INFO, "** txt2sql: %s **", label);

  if (!(coll = mdtxGetCollection(label))) goto error;
  if (!loadCollection(coll, SERV|CTLG|EXTR)) goto error;
  // DO YOUR EXPORT HERE
  if (!releaseCollection(coll, SERV|CTLG|EXTR)) goto error;
  /*******************************************************************/

  rc = TRUE;
 error:
  freeConfiguration();
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
@}
@end example


