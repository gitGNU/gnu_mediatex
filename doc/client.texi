@cindex client

@activity{Client} is the front-end for the @sc{Mediatex} system.
It runs as @code{setuid root} so as to switch between the different
collection contents, but also to do some administrative works such
as mounting and binding directories, create new system accounts...
Before performing any collection works, @activity{Client} update
the meta-data using @procToolsCvs{}. And before leaving, it commit 
modification performed into the configuration and meta-data files.

There is 2 ways @activity{Client} comunicate with @activity{Server}
@itemize @bullet
@item 
Such as @procScriptsCgi{}, @activity{Client} send queries to the 
@activityServer{} over @acronym{TCP} sockets.
@item
@activity{Client} also share a virtual register with the 
@activity{Server}, using share memory and signals.
@end itemize

The @activity{Client} activity is divided into 5 process:
@menu
* conf::        @process{conf}
* supp::        @process{supp}
* serv::        @process{serv}
* misc::        @process{misc}
* upload::      @process{upload}
* motd::        @process{motd}
@end menu

Flood diagram:

@image{mediatex-figures/client,,,,}

@itemize @bullet
@item Events in
@table @code

@item @eventClientMiscInit
@itemx @eventClientMiscRemove
@itemx @eventClientMiscPurge
@itemx @eventClientMiscAddUser
@itemx @eventClientMiscDelUser
from @actorAdmin to @procClientMisc{}: configure the @mediatexO{} system.

@item @eventClientConfAddColl
@itemx @eventClientConfDelColl
from @actorAdminO to @procClientConf{}: configure collections.

@item @eventClientServAddKey
@itemx @eventClientServDelKey
@itemx @eventClientServUpgrade
from @actorPublisherO to @procClientServ{}: manage collection settings.

@item @eventClientConfList
@itemx @eventClientConfShareSupport
@itemx @eventClientConfWithdrawSupp
from @actorPublisherO to @procClientConf{}: list collections ; share/withdraw local supports to collections.

@item @eventClientSuppList
@itemx @eventClientSuppAdd
@itemx @eventClientSuppFileAdd
@itemx @eventClientSuppDel
@itemx @eventClientSuppNote
@itemx @eventClientSuppCheck
from @actorPublisher to @procClientSupp{}: manage local supports.

@item @eventClientUpload
from @actorPublisherO to @procClientUpload{}: upload an incoming archive into the cache.

@item @eventClientMiscMake
@itemx @eventClientMiscClean
@itemx @eventClientMiscSu
@itemx @eventClientMiscAudit
from @actorPublisherO to @procClientMisc{}: build/clean the @acronym{HTML} catalogue ; change to server or collection system user ; simulate retrieving all archives.

@item @eventClientSave
@itemx @eventClientDeliver (no more used)
from @actorPublisherO to @activityServer{}: repectively ask @activityServer to dump its state into disk or to deliver mails related to extracted archives (no more needed).

@item @eventClientExtract
@itemx @eventClientNotify
from @actorPublisherO or @procScriptsCron to @activityServer{}: repectively ask @activityServerO to perform extractions or to communicate its state to other servers.

@item @eventClientMotd
from @procScriptsCron to @procClientMotd{}: build the message of the day (actions @actorPublisherO have to perform).

@item @eventClientMiscBind
@itemx @eventClientMiscUnBind
from @activityServer to @procClientMisc{}: manage collection repository binding on the chrooted jail for @acronym{SSH} remote access.

@item @eventClientMiscGet
from @procServerExtract to @procClientMisc{}: retrieve a remote collection's file via @acronym{SSH}.

@item @eventClientSuppMount
@itemx @eventClientSuppUMount
from @procServerExtract to @procClientSupp{}: manage mounting @iso devices.

@end table

@item Processing

@itemize @bullet
@item
Lock concurent access.
@item
Catalog and extraction rules meta-data files are:
@itemize @bullet
@item
split into 500 ko numbered files, the maximum size @acronym{VIEWVC} advice.
@item
automatically re-serialized and upgraded if the last @file{NN.txt} file was present when loading.
@end itemize
@end itemize

@item Events out
@table @code

@item @eventScriptsUpdate
@item @eventScriptsCommit
from @procClientServ to @procScriptsUpdateCommit{}: manage @acronym{CVS} synchronisation.

@item @eventScriptsNew 
@itemx @eventScriptsFree
from @procClientConf to @procScriptsNewFreeClean{}: create/subscribe or destroy/unsubscribe a collection. 

@item @eventScriptsMount
@itemx @eventScriptsUmount
from @procClientSupp to @procScriptsMount{}: manage mounting @iso devices.

@item @eventServerSaveReg
@itemx @eventServerExtractReg
@itemx @eventServerNotifyReg
@itemx @eventServerDeliverReg
from @activityClient to @activityServer{}: wrap the queries to @activityServerO{}.

@item @eventServerHaveQuery
from @procClientSupp to @procServerHave{}: tels @activityServerO{} a support is now available.

@item @eventServerUploadQuery
from @procClientMisc to @procServerCache{}: ask @activityServerO{} to upload an incoming archive into its cache.

@item @eventScriptsInit
@itemx @eventScriptsRemove
@itemx @eventScriptsPurge
from @procClientMisc to @procScriptsInitRemovePurge{}: start/stop the @mediatexO{} daemon.

@item @eventScriptsAddUser
@itemx @eventScriptsDelUser
from @procClientMisc to @procScriptsAddDelUser{}: manage @actorPublisherO users.

@item @eventScriptsNew
@itemx @eventScriptsFree
from @procClientConf to @procScriptsNewFreeClean{}: create/subscribe or destroy/unsubscribe a collection.

@item @eventScriptsClean
from @procClientMisc to @procScriptsNewFreeClean{}: clean the local @acronym{HTML} catalogue.

@item @eventToolsSshCopy 
from @procClientMisc to @procToolsSsh{}: copy file from one remote server's cache.
@end table

@item Data in/out
@itemize @bullet
@item @dataConf
@item @dataServers
@item @dataCatalog
@item @dataExtract
@end itemize
@end itemize

Code:
@table @file
@item src/common/connect.h
@item src/common/connect.c
@item src/common/register.h
@item src/common/register.c
@item src/client/shellQuery.l
@item src/client/shellQuery.y
@item src/client/serv.c
@item src/mdtx.c
@end table

@node conf
@subsection conf
@include conf.texi
@node supp
@subsection supp
@include supp.texi
@node serv
@subsection serv
@include serv.texi
@node misc
@subsection misc
@include misc.texi
@node upload
@subsection upload
@include upload.texi
@node motd
@subsection motd
@include motd.texi
