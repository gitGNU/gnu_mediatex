@cindex How-to
@cindex Tests

The goal of this section is to help to install @sc{mediatex} software 
and to test it by setting an ``hello world'' collection example. 

@menu
* Install::             Compile and install.
* Scenario 1::	        Manage supports.
* Scenario 2::	        Manage collections.
* Scenario 3::          Extract an archive.
* Scenario 4::          Adding new archives.
* Scenario 5::          Adding a server.
* Scenario 6::          Adding a nat server.
@end menu

@note{} the scenario must be run sequentially (6 depends on 5...).

@node Install
@section Install
@cindex Install

Get the sources:
@example
@c $ cvs -z3 \
@c    -d:pserver:anonymous@@cvs.savannah.nongnu.org:/sources/mediatex \
@c    co mediatex
$ git clone git://git.savannah.nongnu.org/mediatex.git
@end example

Software requirements.
@itemize @bullet
@item Compilation:
automake gettext libtool make flex bison help2man texinfo transfig libssl-dev libavl-dev libacl1-dev
@c @item Info documentation:
@c ghostscript
@item Documentation in others format than texinfo and man (optional):
imagemagick texlive
@item Installation:
ssh apache2 cvs viewvc git cgit libavl1 libacl1 acl tar cpio gzip bzip2 unzip bc findutils
@item Debian package generation
libfile-fcntllock-perl
@end itemize
@c initramfs-tools 

Here are the steps used to build the project from scratch:
@example
$ autoscan
$ autoreconf -i
$ ./configure
$ make V=0
$ make check V=0
$ make distcheck V=0
@end example

However this have to be adapt to be really functional for installation 
or to enable debuging: @*
(from @file{/usr/share/perl5/Debian/Debhelper/Buildsystem/autoconf.pm}) 
@example
$ ./configure \
  --prefix=/usr \
  --includedir=/usr/include \
  --mandir=/usr/share/man \
  --infodir=/usr/share/info \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --libexecdir=/usr/lib/mediatex
$ make CFLAGS="-Wall -O0 -g" V=0
# make install
# mediatex adm init
@end example

Other formats than @acronym{GNU INFO} of this documentation are also available from the sources (optional):
@example
$ cd doc
$ make html pdf
# make install-html install-pdf
@end example

Someone may also prefers to build and install a @acronym{DEBIAN} package:
@example
$ make dist
$ tar -zxf mediatex-0.4.tar.gz
$ mv mediatex-0.4.tar.gz mediatex_0.4.orig.tar.gz
$ cd mediatex-0.4
$ cp -fr ../debian .
$ dpkg-buildpackage -us -uc
$ ls ..
@end example

The fully @acronym{DEBIAN} build process should finish using @code{pbuilder}:
@example
$ cd mediatex-0.4
$ cp -fr ../debian .
# pbuilder create --distribution squeeze \
  --basetgz ../jessie.tgz \
  --mirror http://ftp.fr.debian.org/debian
# pdebuild --use-pdebuild-internal \
  --debbuildopts -sa -- \
  --basetgz ../jessie.tgz
@end example

Next, a test script automate the 6 following scenarios:
@example
# /usr/share/mediatex/examples/tests.sh
@end example

@node Scenario 1
@section Scenario 1: manage supports
@cindex Support
First of all, initialise the default @code{mdtx} server 
(@procScriptsInitRemovePurge{}).
@note{} this is already done by the @acronym{DEBIAN} package.
@example
# mediatex adm init
@end example

You now have local access to the local meta-data history using 
this @acronym{url}: @*
@url{http://localhost/~mdtx}

Add a new 
@actorPublisher{} user using an already existing user login.
Then, reload the Xsession or use @command{su} to re-login in order 
the 
@actor{Publisher} belongs effectively to his new @code{mdtx} group.
@example
$ id
uid=1000(@var{username1})@dots{}
# mediatex adm add user @var{username1}
# su @var{username1}
$ id
@dots{}groupes=@dots{},122(mdtx),
@end example

When initialising, an out-dated @command{mediatex}'s example support
was added.
@example
$ mediatex ls supp
@end example

As @sc{Publisher}, please check the ``message of the day'' 
and provide this wanted support. @*
@example
$ mediatex motd
Please provide theses local supports:
@dots{}
$ mediatex check supp ex-cd1 on /usr/share/mediatex/misc/logoP1.iso
@end example

@sc{motd} will not complain any more about this support 
as it was seen recently and own a good score.

@cindex Support
Add a new support. @*
@note{} So as not to wast a @sc{cd}, we are using an @sc{iso} files
intead of real supports (CD, USB key, @dots{} 
from such @code{/dev/sd[bc@dots{}]} peripheral files) 
as it does the same result.
@example
$ mediatex add supp ex-cd2 on /usr/share/mediatex/misc/logoP2.iso
@end example

Add a new File. @*
Moreover, your final archive may simply be a file on your filesystem.
In this case @mediatexO{} can automatically acces it without asking for,
using the message of the day.
@example
$ mediatex add file /usr/share/mediatex/misc/logoP1.iso
@end example

@note{} There is a 10 chars string you can use to put what you want in order to record a state for each support.
@example
$ mediatex add supp ex-cd2 on /usr/share/mediatex/misc/logoP2.iso
$ mediatex note supp ex-cd2 as what_you_want
$ mediatex ls supp
@end example

@node Scenario 2
@section Scenario 2: manage collections
@cindex Collection
Collections are managing shared support's contents, exposing them to the
rest of the world.

Add the new ``hello'' collection. 
You will be asked for the ``mdtx'' password that will gives you 
full access next, on the @acronym{HTML} catalogue.
Once again you will need to re-login so as 
the 
@actorPublisher{} belongs to the new @code{mdtx-hello} group.
@example
# mediatex adm add coll hello
# su @var{username1}
@end example

Set the server's hostname on @file{/etc/mediatex/mdtx.conf} 
so as remote servers from latter scenario 5 and 6 may acces to the
collection too.
@example
<<<
host    localhost
---
host    @var{hostname1}
>>>
@end example

Build the ``hello'' @acronym{Html} catalogue.
@example
$ mediatex make coll hello
@end example

Add a new 
@actorUser{} to the collection's @sc{apache} users.
@example
$ htdigest /etc/mediatex/mdtx-hello/apache2/htpasswd \
           mdtx-hello @var{username2}
@end example

Give him permissions on some of the @sc{html} sections by editing 
the following file: @*
@file{/etc/mediatex/mdtx-hello/apache2/htgroup}
@example
index: mdtx @var{usename2}
cache: mdtx @var{usename2}
score: mdtx @var{usename2}
history: mdtx @var{usename2}
@end example

Browses the remotely available collection's catalog via this @sc{url}: @*
@url{https://@var{hostname1}/~mdtx-hello}

@note{} for remote access, ensure @var{hostname1} is known, by adding it to the @file{/etc/hosts} file of clients.

Change the logo:
@example
$ cp yourLogo.@{png|jpg|gif@} /etc/mediatex/mdtx-hello/logo
$ mediatex make coll hello
@end example

@node Scenario 3
@section Scenario 3: extract an archive
@cindex Rules
First share supports with the collection
@example
$ mediatex add supp ex-cd1 to coll hello
$ mediatex add supp ex-cd2 to coll hello
@end example

As a @sc{User}, browse the collection via this @sc{url}:
@url{https://@/@sc{hostname1}/@/~mdtx-hello} and ask for a content 
(by clicking on the floppy disk picture).

As the cache is empty, you will be prompt to give your email address.
Please do it.

As @sc{Publisher}, please check the ``message of the day''
and provide wanted supports.
@example
$ mediatex motd
$ mediatex check supp ex-cd1 on /usr/share/mediatex/misc/logoP1.iso
$ mediatex check supp ex-cd2 on /usr/share/mediatex/misc/logoP2.iso
@end example

If your host is configurated to send emails, 
you should have received an email telling the previous link you try
is now be available.

@node Scenario 4
@section Scenario 4: adding new archives
@cindex Archive
@cindex Upload

Add a new container to the catalogue using its @sc{md5} hash sum and its size:
@example
# apt-get install cowsay
$ mkdir cow1
$ cowsay mheu1 > cow1/cow1.txt
$ tar -zxf cow1.tgz cow1/
$ MD5_1=$(md5sum cow1/cow1.txt | cut -d' ' -f 1)
$ SIZE_1=$(ls cow1/cow1.txt -l | cut -d' ' -f 5)
$ MD5_2=$(md5sum cow1.tgz | cut -d' ' -f 1)
$ SIZE_2=$(ls cow1.tgz -l | cut -d' ' -f 5)

$ cat > cow1.cat <<EOF
Document "cow1": "animal"
  $MD5_1:$SIZE_1
EOF

$ cat > cow1.ext <<EOF
(TGZ 
  $MD5_2:$SIZE_2
=>
  $MD5_1:$SIZE_1 cow1/cow1.txt
)
EOF

$ mediatex upload file cow1.tgz catalog cow1.cat rules cow1.ext \
   to coll hello
@end example

Only add a file:
@example
$ cowsay mheu2 > cow2.txt
$ mediatex upload file cow2.txt to coll hello
@end example

Then, @actorPublisherO{} have to retrieve the files form the cache
, store them into a support and provide this new support to the collection.
@example
$ mediatex motd
$ mediatex add supp ex-cow1 on cow1.tgz
$ mediatex add supp ex-cow1 to coll hello
@end example

Now rebuild the @acronym{html} catalogue, 
and you should have access to the new archive
as seen previously (@ref{Scenario 3}).
@example
$ mediatex make coll hello
@end example

@node Scenario 5
@section Scenario 5: add a second server
@cindex Consistencyers list file
On another (second) host, initialise the server. 
As we seen before (@ref{Scenario 1}), @var{username1} is an already 
existing user login (on this server).
@example
 @var{hostname2}# mediatex adm init
 @var{hostname2}# mediatex adm add user @var{username1}
 @var{hostname2}$ su @var{username1}
@end example

Change the hostname in @file{/etc/mediatex/mdtx.conf} configuration file
@example
<<<
host    localhost
---
host    @var{hostname2}
>>>
@end example

Try to join the ``hello'' collection. The host fingerprint
should match with the one given in @var{hostname1} configuration file.
@example
 @var{hostname2}# mediatex adm add coll hello@@@var{hostname1}
@end example

This has created your local collection key.
Send it to a 
@actorPublisher{} already managing this collection.
@example
 @var{hostname2}# cat ~mdtx-hello/.ssh/id_dsa.pub
@end example

@sc{Publisher} has to add your key to the collection.
@example
@var{hostname1}$ mediatex add key @sc{keyFile} to coll hello
@end example

Finally, retry to join the collection.
@example
 @var{hostname2}# mediatex adm add coll hello@@@var{hostname1}
 @var{hostname2}$ su @var{username1}
@end example

Now the second server should be connected. We will check it. 
@sp 1
First, empty the @var{hostname1} cache and reload the daemon.
@example
@var{hostname1}# rm -fr ~mdtx/cache/mdtx-hello/logo*
@var{hostname1}# rm -fr ~mdtx/cache/mdtx-hello/supports
@var{hostname1}$ mediatex upgrade
@end example

Secondly, share the @code{ex-cd1} support with the collection on
@var{hostname2}.
@example
 @var{hostname2}$ mediatex add supp ex-cd1 to coll hello
@end example

As a @sc{User}, browse the collection on the first server via this @sc{url}:
@url{https://@/@var{hostname1}/@/~mdtx-hello} and ask once again for the logo image's archive, providing your @acronym{email} address.

When first server reload (scheduled by @sc{cron}),
it will notify the second server.
@example
@var{hostname1}$ mediatex srv notify
@end example

@sc{Publisher} on @var{hostname2} is now asked to provide the supports it shares
@example
 @var{hostname2}$ mediatex motd
 @var{hostname2}$ mediatex check supp ex-cd1 on \
                           /usr/share/mediatex/misc/logoP1.iso
@end example

Once second server notify, first server will copy back the provided file it needs, to serve the @sc{User} query.
@example
 @var{hostname2}$ mediatex srv notify
@var{hostname1}$ mediatex srv extract
@var{hostname1}$ ls ~mdtx/cache/mdtx-hello
@end example

@note{} as for every supports having a bad score, the uploaded files
((@ref{Scenario 4}) are duplicated too.
@example
 @var{hostname2}$ mediatex srv extract
 @var{hostname2}$ ls ~mdtx/cache/mdtx-hello
@end example


@node Scenario 6
@section Scenario 6: add a @sc{nat} server
@cindex NAT

@note{} By @sc{nat} we mean this third server should be located 
on a private network.
It access the internet via the second server as gateway,
but cannot be accessed from outside of his private network.
@sp 1

Network configuration example:
@example
 @var{hostname2}$ cat /proc/net/dev
 eth0 ... (internet)
 eth1 ... (private network)
 @var{hostname2}# echo 1 > /proc/sys/net/ipv4/ip_forward
 @var{hostname2}# iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o eth0 \
                           -j MASQUERADE
  @var{hostname3}# ping gnu.org (ok)
@var{hostname1}# ping @sc{hostname3} (ko: Destination Host Unreachable)
@end example

Join collection with the third server 
as we seen previously (@ref{Scenario 5}).

Edit the configuration on both second and third server:
@example
 @var{hostname2}$ cat /etc/mediatex/mdtx.conf
...
networks   private1, www
gateways   private1
...
 @var{hostname2}$ mediatex upgrade
  @var{hostname3}$ cat /etc/mediatex/mdtx.conf
...
networks   private1
...
  @var{hostname3}$ mediatex upgrade
@end example

With this settings, the second server will relay queries and contents
between the first and the third server:
@itemize @bullet
@item
messages from @var{hostname1} are forwarded to @var{hostname3}.
@item
@var{hostname3} do not send messages to @var{hostname1} as its contents 
are retrieved back by @var{hostname2}.
@end itemize

Checking it:
@sp 1
First, share the @code{ex-cd2} support with the collection on
@var{hostname3}.
@example
  @var{hostname3}$ mediatex add supp ex-cd2 on \
                            /usr/share/mediatex/misc/logoP2.iso
  @var{hostname3}$ mediatex add supp ex-cd2 to coll hello
@end example

Once first server have reloaded, it will notify queries to the second 
server (via @sc{cron}) which will relay them to the third one.
@example
@var{hostname1}$ mediatex upgrade
@var{hostname1}$ mediatex srv notify
@end example

@sc{Publisher} on @var{hostname3} is now asked 
to provide the supports it shares.
@example
  @var{hostname3}$ mediatex motd
  @var{hostname3}$ mediatex check supp ex-cd2 on \
                            /usr/share/mediatex/misc/logoP2.iso
@end example

Once third server notify, second server will copy (and extract) the files 
needed by server 1.
@example
  @var{hostname3}$ mediatex srv notify
 @var{hostname2}$ mediatex srv extract
 @var{hostname2}$ ls ~mdtx/cache/mdtx-hello
@end example

Finally second server notify and then first server copies the requested 
file and delivers a mail to advice the @sc{User} it becomes available.
@example
 @var{hostname2}$ mediatex srv notify
@var{hostname1}$ mediatex srv extract
@end example
