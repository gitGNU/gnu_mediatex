@cindex API
@cindex OAIS

@mediatexO{} focus on providing an @sc{api} to ask for, and retrieve 
archives from where they are stored.

@menu
* Commands::             Client queries.
* Options::	         Command line options.
* Communication model::  Main specification.
* Accessing an archive:: HTTP interface.
* System users::         System users and groups.
* Stack model::          Meta-data consistency.
@end menu

@node Commands
@section Commands
@cindex Commands

@mediatexO{} @activityClient{}'s queries:

@itemize @bullet

@item Admin queries:
@table @code

@item @eventClientMiscInit
@itemx @eventClientMiscRemove
@itemx @eventClientMiscPurge
Initialise, remove and purge @mediatexO{} software.

@item @eventClientMiscAddUser
@itemx @eventClientMiscDelUser
Manage @actorPublisherO{} users.

@item @eventClientConfAddColl
@itemx @eventClientConfDelColl
Create/subscribe or destroy/unsubscribe a collection. 

@end table
@item Data management:
@table @code

@item @eventClientSuppAdd
Add a new external support: a device or file not always accessible.

@item @eventClientSuppFileAdd
Add a new external support's file: a file always accessible locally.

@item @eventClientSuppDel
Remove a support (external support or support's file).

@item @eventClientSuppList
List supports.

@item @eventClientSuppNote
Associate a short text (10 character's) with a support, which will be display on the list.

@item @eventClientSuppCheck
Provide an external support (that is accessible now).

@item @eventClientConfShareSupport
@itemx @eventClientConfWithdrawSupp
Manage sharing support with collections.

@item @eventClientUpload
Upload an incoming archive into the cache.
Appending one or two '+' will run ``uprade'' or ``upgrade+make'' queries too.

@end table
@item Meta-data management:
@table @code

@item @eventClientConfList
List collections.

@item @eventActorPublisherMotd
Display actions @actorPublisherO{} have to perform.

@item @eventClientServAddKey
@itemx @eventClientServDelKey
Manage remote servers subscription.

@item @eventClientServUpgrade
Synchronise local server.
Appending one '+' will run ``make'' queries too.

@item @eventClientMiscMake
@itemx @eventClientMiscClean
Manage the local @acronym{HTML} catalogue.

@item @eventClientMiscSu
Change to @mediatex{} or collection system user.

@item @eventClientMiscAudit
Extract all archives from a collection.

@end table
@item Queries to daemon:
@table @code

@item @eventClientSave
Ask @activityServer{} to dump its state into disk.

@item @eventClientExtract
Ask @activityServerO{} to perform extractions.

@item @eventClientNotify
Ask @activityServerO{} to communicate its state to other servers.

@item @eventClientScan
Ask @activityServerO{} to manage file added manually to the cache. The files must be describes into meta-data, otherwise they are deleted from the cache. On quick scan, only file's sizes are matche, not checksums.

@item @eventClientTrim
Ask @activityServerO{} to remove from the cache all files that can be extracted by using containers present into the cache.

@item @eventClientClean
Ask @activityServerO{} to remove from the cache all files that are safe and can be extracted locally using local supports.

@item @eventClientPurge
Ask @activityServerO{} to remove from the cache all files that are safe.

@item @eventClientStatus
Ask @activityServerO{} to log its memory status and available cache's sizes.

@end table
@item Internal/debug queries:
@table @code

@item @eventClientServUpdate
@item @eventClientServCommit
Manage @acronym{GIT} synchronisation (already managed by ``upgrade'' query)

@item @eventClientMiscAdmMake
Build the local @acronym{HTML} catalogue without @acronym{GIT} synchronisation.

@item @eventClientMiscBind
@itemx @eventClientMiscUnBind
Manage collection repository binding on the chrooted jail for @acronym{SSH} remote access (already manage @activityServerO{}).

@item @eventClientSuppMount
@itemx @eventClientSuppUMount
Manage mounting @iso{} devices.

@item @eventClientMiscGet
Retrieve a remote collection's file via @acronym{SSH}.

@end table
@end itemize

@node Options
@section Command line Options
@cindex Options

Theses options apply to the 3 binaries provided by @mediatexO.

@table @option
@item -h
@itemx --help
Display the help message.

@item -v, --version
Display the mediatex software version.

@item -f @var{facility}
@itemx --facility @var{facility}
Set facility to use for logging. See syslog(3) : mainly @code{file} to log to the standard output or @code{local2} to log to @acronym{SYSLOG}.

@item -l @var{path}
@itemx --log-file @var{path}	
Log into a file. Needs the @code{file} facility (default).

@item -s severity[:module(,module)*]
@item --severity severity[:module(,module)*]
Set severity to log, by modules.
Choose severity among @code{err}, @code{warning}, @code{notice}, @code{info} and @code{debug}.
You may provide modules among @code{alloc}, @code{script}, @code{misc}, @code{memory}, @code{parser}, @code{common} and @code{main}.
If you provide no module, all except the @code{alloc} module will be selected.

@item -m @var{number}
@itemx --memory-limit @var{number}
Set a nice limit for malloc in Mo. When @activityServerO{} overcome this limit, it will try to release objects not used.  

@item -n
@itemx --dry-run
Do a dry run: do not write anything.

@item -L, 
@itemx --debug-lexer
Enable debug information from lexers.

@item -c @var{mdtxLabel}
@item --conf-label @var{mdtxLabel}
Over hide 'mdtx.conf' configuration file and use @var{mdtxLabel} system user instead of @code{mdtx}. This permit to run independent @mediatexO{} systems on the same machine. This is mainly used for tests.

@item -a
@itemx --alone
Do not make @acronym{GIT} queries. This may be useful if you temporary loose your network connection, or if you want to be temporally isolated for tests.
@note{} This option is only available on @activityClient{} as @activityServer{} and @procScriptsCgi{} never perform @acronym{GIT} queries.

@end table

@node Communication model
@section Communication model
@cindex Communication model

The following specifications use the @sc{Merise} conception method.
Here are the typographical conventions used:

@itemize @bullet
@item 
Caps are use for @actor{Actor}s and @activity{activitie}s,
@item 
Bold is use for @process{processing}s,
@item 
``<>'' are use for object's @state{states},
@item 
Verbatim is used for @code{@event{event}}s, which may be:
@itemize @bullet
@item @code{@event{# command}} : @actor{Admin} or @actor{Date} command line
@item @code{@event{$ command}} : @actor{Publisher} command line
@item @code{@event{(message)}} : final message like mail and motd
@item @code{@event{<message>}} : synchronous message using a socket
@item @code{@event{[register]}} : asynchronous message using signal
@item @code{@event{function()}} : internal call
@end itemize
@end itemize

Communication model:

@image{mediatex-figures/main,,,,}

@itemize @bullet
@item 4 actors interact with the @mediatexO{} activity
@itemize @minus
@item @actorUser
@item @actorPublisher
@item @actorAdmin
@item @actorDate
@end itemize

@item Events in
@table @code

@item @eventToolsApacheHttpGet{} 
@itemx @eventToolsApacheHttpPost{} 
@itemx @eventToolsApacheStartDownload
from @actorUserO

@item @eventClientServAddKey
@itemx @eventClientServDelKey
@itemx @eventClientServUpgrade
@itemx @eventClientSuppAdd
@itemx @eventClientSuppFileAdd
@itemx @eventClientSuppDel
@itemx @eventClientSuppNote
@itemx @eventClientSuppCheck
@itemx @eventClientSuppList
@itemx @eventClientConfList
@itemx @eventClientConfShareSupport
@itemx @eventClientConfWithdrawSupp
@itemx @eventClientUpload
@itemx @eventClientMiscMake
@itemx @eventClientMiscAudit
from @actorPublisherO

@item @eventScriptsInitdStart{} 
@itemx @eventScriptsInitdStop
@itemx @eventScriptsInitdStatus
@itemx @eventScriptsInitdReload
@itemx @eventClientMiscInit
@itemx @eventClientMiscRemove
@itemx @eventClientMiscPurge
@itemx @eventClientMiscAddUser
@itemx @eventClientMiscDelUser
@itemx @eventClientConfAddColl
@itemx @eventClientConfDelColl
from @actorAdminO

@item @eventToolsCronDate
from @actorDateO

@end table

Commands are detailed into the @mediatex{} specifications.

@item Events out
@table @code

@item @eventActorUserHtmlForm{} 
@itemx @eventActorUserHtmlRedirect{} 
@itemx @eventActorUserMail{} 
to @actorUserO

@item @eventActorPublisherMotd
@itemx @eventActorPublisherMail{} 
to @actorPublisherO

@item @eventActorAdminMail
to @actorAdminO

@end table
@item Data in/out
@itemize @bullet
@item @dataConf
@item @dataCatalog
@item @dataExtract
@end itemize
Files involved are detailed in the next chapter (@pxref{Who}).
@end itemize

@node Accessing an archive
@section Accessing an archive
@cindex Access

This diagram describes what happen when a @actorUser{} access an archive:
@itemize @bullet
@item available on some @activityServer{}'s caches
@item not available on any @activityServer{}'s cache.
@end itemize

@image{mediatex-figures/accessing,,,,}

@node System users
@section System users and groups

@mediatexO{} use @code{acl} to share files between system users.

Systems users and groups:
@table @code
@item root
@actorAdmin{}, @actorDate
@item www-data
@actorUser
@item mdtx
@activityServer{}, @activityClient{} (default)
@item mdtx-@var{col}
@activityClient{} (collection context)
@item @var{username}
@actorPublisher{}s
@end table

@actorPublisherO{}'s system users belongs to the @code{mdtx} group.
@procScriptsAddDelUser{}

@node Stack model
@section Meta-data consistency

@acronym{GIT} pull and push operations are done implicitly when loading and serialising files.
This may be view like a stack model ensuring consistency on meta-data files (@pxref{Relational schema}).

The so-called meta-data files are mentioned bellow using the followings numbers:
@enumerate 1
@item @dataConf
@item @dataSupp
@item @dataChecksum
@item @dataCatalog
@item @dataExtract
@item @dataServers
@end enumerate

All calls to @activityClientO{} follow the same operations:
@multitable @columnfractions .1 .9
@headitem Stage @tab Description
@item [A @tab Scripting, which do not need to load the meta-data
@item [B @tab @acronym{GIT} pull and parse configuration meta-data (1, 2)
@item [C @tab @acronym{GIT} pull and parse collection meta-data (3, 4, 5, 6)
@item [D @tab Generic upgrade works: upgrade @acronym{SSH} and @acronym{GIT} settings and re-compute the local image's score
@item D] @tab Working on meta-data
@item C] @tab Serialise collection meta-data and @acronym{GIT} push (3, 4, 5, 6)
@item B] @tab Serialise configuration meta-data and @acronym{GIT} push (1, 2) 
@item A] @tab Send @code{HUP} message to @activityServer{}
@end multitable

@note
@itemize
@item Stage [D (Generic upgrade works) 
is only processed when (6) is loaded.
This stage insure connection consistency between remote servers :
@example
   MASTER          shared           SLAVES
---------------------------------------------
  mdtx.conf <--> servers.txt <--> mdtx.conf
                     |
.ssh/       <--------+----------> .ssh/
.git/config <--------+----------> .git/config
@end example

@item On stage C] (Serialise meta-data files), 
the default behaviour is to not serialise (4) and (5)
unless they provide a new @file{NN.txt} post-fixed file.
This intents to speed-up some queries endings (as @code{make}).
In order to force serialising theses files you have to use the @code{upgrade} query.
@end itemize

Bellow details how meta-data files are affected by @activityClientO{}'s queries.

@itemize
@item @actorAdmin{} queries:
@multitable @columnfractions .50   .03     .05      .07     .03     .03     .07     .05      .03
@headitem Query                    @tab [A @tab [B  @tab [C @tab [D @tab D] @tab C] @tab B]  @tab A]
@item @eventClientMiscInit{}       @tab y  @tab     @tab    @tab    @tab    @tab    @tab 1,2 @tab y
@item @eventClientMiscRemove{}     @tab y  @tab     @tab    @tab    @tab    @tab    @tab     @tab
@item @eventClientMiscPurge{}      @tab y  @tab     @tab    @tab    @tab    @tab    @tab     @tab
@item @eventClientMiscAddUser{}    @tab y  @tab     @tab    @tab    @tab    @tab    @tab     @tab
@item @eventClientMiscDelUser{}    @tab y  @tab     @tab    @tab    @tab    @tab    @tab     @tab
@item @eventClientConfAddColl{}    @tab y  @tab 1,2 @tab 6  @tab y  @tab y  @tab 6  @tab 1,2 @tab y
@item @eventClientConfDelColl{}    @tab y  @tab 1   @tab    @tab    @tab y  @tab    @tab 1   @tab y
@end multitable

@item @activityClientO{} to himself queries (or debugging queries):
@multitable @columnfractions .50   .03     .05      .07     .03        .03     .07     .05     .03
@headitem Query                    @tab [A @tab [B  @tab [C    @tab [D @tab D] @tab C] @tab B] @tab A]
@item @eventClientServUpdate{}     @tab    @tab 1   @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientServCommit{}     @tab    @tab 1   @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientMiscAdmMake{}    @tab    @tab 1,2 @tab 4,5,6 @tab y  @tab y  @tab    @tab    @tab
@item @eventClientMiscBind{}       @tab y  @tab     @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientMiscUnBind{}     @tab y  @tab     @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientSuppMount{}      @tab y  @tab     @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientSuppUMount{}     @tab y  @tab     @tab       @tab    @tab    @tab    @tab    @tab
@item @eventClientMiscGet{}        @tab    @tab 1   @tab 6     @tab y  @tab y  @tab    @tab    @tab
@end multitable

@item Queries to operate on @activityServerO{}:
@multitable @columnfractions .50   .03     .05      .07     .03     .03     .07     .05     .03
@headitem Client query             @tab [A @tab [B  @tab [C @tab [D @tab D] @tab C] @tab B] @tab A]
@item @eventClientSave{}           @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientExtract{}        @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientNotify{}         @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientScan{}           @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientTrim{}           @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientClean{}          @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientPurge{}          @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@item @eventClientStatus{}         @tab    @tab     @tab    @tab    @tab    @tab    @tab    @tab y
@end multitable

@item @actorPublisherO{} data management's queries:
@multitable @columnfractions  .50   .03     .05      .07     .03     .03     .07     .05     .03
@headitem Client query               @tab [A @tab [B  @tab [C @tab [D @tab D] @tab C] @tab B] @tab A]
@item @eventClientSuppAdd{}          @tab    @tab 1,2 @tab    @tab    @tab y  @tab    @tab 2   @tab
@item @eventClientSuppFileAdd{}      @tab    @tab 1,2 @tab    @tab    @tab y  @tab    @tab 2   @tab
@item @eventClientSuppDel{}          @tab    @tab 1,2 @tab 6  @tab y  @tab y  @tab 6  @tab 1,2 @tab y
@item @eventClientSuppList{}         @tab    @tab 1,2 @tab    @tab    @tab y  @tab    @tab     @tab
@item @eventClientSuppNote{}         @tab    @tab 1,2 @tab    @tab y  @tab y  @tab    @tab 2   @tab
@item @eventClientSuppCheck{}        @tab    @tab 1,2 @tab 5  @tab    @tab y  @tab    @tab 2   @tab
@item @eventClientConfShareSupport{} @tab    @tab 1,2 @tab 6  @tab y  @tab y  @tab 6  @tab 1,2 @tab y
@item @eventClientConfWithdrawSupp{} @tab    @tab 1,2 @tab 6  @tab y  @tab y  @tab 6  @tab 1,2 @tab y
@item @eventClientUpload{}           @tab    @tab 1   @tab 5  @tab    @tab y  @tab 5  @tab     @tab y
@end multitable

@item @actorPublisherO{} meta-data management's queries:
@multitable @columnfractions .50   .03     .05      .07     .03     .03     .07     .05     .03
@headitem Client query             @tab [A @tab [B  @tab [C @tab [D @tab D] @tab C] @tab B] @tab A]
@item @eventClientConfList{}       @tab    @tab 1   @tab       @tab    @tab y  @tab       @tab     @tab
@item @eventClientMotd{}           @tab    @tab 1,2 @tab 3,5,6 @tab y  @tab y  @tab 6     @tab 2   @tab y
@item @eventClientServAddKey{}     @tab    @tab 1   @tab 6     @tab y  @tab y  @tab 6     @tab 2   @tab y
@item @eventClientServDelKey{}     @tab    @tab 1   @tab 6     @tab y  @tab y  @tab 6     @tab 2   @tab y
@item @eventClientServUpgrade{}    @tab    @tab 1   @tab 4,5,6 @tab y  @tab    @tab 4,5,6 @tab 1,2 @tab y
@item @eventClientMiscMake{}       @tab    @tab 1   @tab 4,5,6 @tab y  @tab y  @tab 4,5,6 @tab 1,2 @tab y
@item @eventClientMiscClean{}      @tab y  @tab     @tab       @tab    @tab    @tab       @tab     @tab
@item @eventClientMiscSu{}         @tab    @tab 1   @tab       @tab    @tab y  @tab       @tab     @tab
@item @eventClientMiscAudit{}      @tab    @tab     @tab 5     @tab    @tab    @tab       @tab     @tab
@end multitable
@end itemize
