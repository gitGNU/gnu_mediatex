@cindex motd

The @process{Upload} process provide a single @api{} to upload new incoming archives. This query can take 4 parameters:
@itemize @bullet
@item some descriptive meta-data (to concatenate into the @dataCatalog{} file)
@item extraction rules (to concatenate into the @dataExtract{} file) when the the file provided is an archive container (@acronym{TGZ}@dots{}).
@item an archive file
@item a target path where to store the archive into the cache.
@end itemize

Checks are made to optimise the meta-data consistency so the provided meta-data files are first parsed into memory, using the same parsers as usual.
Because we always assert that an archive description should be linked to an existing archive, we cannot upload here descriptions without a related archive or extraction rules. To do it, you will have to edit or concatenate yourself the @dataCatalog{} file.

Process conceptual model:

@image{mediatex-figures/motd,,,,}

@itemize @bullet
@item Events in
@table @code

@item @eventClientUpload
from @actorPublisher{}, @procToolsSyslog{}, @procScriptsCron{}, @procScriptsAudit{}: upload an incoming archive into the cache.

@end table
@item Processing

@itemize @bullet
@item parse the provided meta-data,
@item check archive is not already into the current extraction rules,
@item 
concatenate new extraction rules to @dataExtract{} file,
into the dedicated @code{INC} container and associated with current date,
@item ask daemon to reload,
@item ask daemon to upload the incoming archive file.
@end itemize

@item Events out
@table @code

@item @eventServerUploadQuery
to @procServerUpload{}: ask @activityServerO{} to upload an incoming archive into its cache.

@end table

@item Data in/out
@itemize @bullet
@item @dataExtract
@end itemize

@item Data out
@itemize @bullet
@item @dataCatalog
@end itemize
@end itemize

Examples:
@itemize @bullet
@item Adding new archives: @pxref{Scenario 4}.
@end itemize
 
Code:
@table @file
@item src/client/upload.c
@end table
