@cindex server

The @activity{Server} manage local cache integrity and 
exchange files with other @sc{Mediatex}'s @activity{Server}s.
@activityClient{} may ask it to updates the 
@dataChecksum{} file
that gives the local cache's status.

The @activity{server} activity is diveded into 6 process:
@menu
* cache::       @process{cache}
* extract::     @process{extract}
* cgiServer::   @process{cgiServer}
* have::        @process{have}
* srvUpload::   @process{upload}
* notify::      @process{notify}
* delivering::  @process{delivering}
@end menu

Flood diagram:

@image{mediatex-figures/server,,,,}

@itemize @bullet
@item Events in
@table @code

@item @eventServerStart 
@itemx @eventServerStop
@itemx @eventServerReload
from @procScriptsInitd{}: standard @acronym{UNIX} process management (HUP signal for reload...).

@item @eventServerSaveReg
from @procClientMisc{}: serialize the last cache status into a file.

@item @eventServerExtractReg
@itemx @eventServerNotifyReg 
@itemx @eventServerDeliverReg
from @activityClientO respectively to 
@procServerExtract{}, @procServerNotify{} and @procServerDeliver{}: ask to extract, notify or deliver (no more used) by setting a value into share memory and sending a signal.

@item @eventServerCgiQuery 
from @procScriptsCgi to @procServerCgiSrv{}: receive a socket query asking for an archive.

@item @eventServerHaveQuery 
from @procClientSupp to @procServerHave{}: receive a socket query providing archives from a support.

@item @eventServerUploadQuery
from @procClientMisc to @procServerCache{}: receive a socket query providing an archive and asking to handle it into the cache.

@item @eventServerNotifyQuery
from a remote @activityServerO to @procServerNotify{}: receive a socket query providing remote cache content index.

@end table
@item Processing

@itemize @bullet
@item 
Serialise cache index into @dataChecksum{}, on @eventServerExtractReg
query. 
Remote supplies and demands are now readable by @activityClientO{}, or on next @activityServer start-up.

@item Re-index the cache when reciving HUP signal:
@itemize @bullet
@item wait until all threads end,
@item lock concurent threads setup
@item serialise cache index into @dataChecksum{},
@item free all memory used,
@item parse @dataConf file configuration,
@item parse @dataChecksum{},
@item scan the cache dirrectory
@item unlock concurent threads setup
@end itemize
@item 
@end itemize

@item Events out
@table @code

@item @eventClientMiscBind
@itemx @eventClientMiscUnBind
@itemx @eventClientMiscGet
to @procClientMisc{}: tel client to make operation that needs privileges, like binding directories into the chroot jail and using collection account to retrieve archives remotely.

@item @eventClientSuppMount
@itemx @eventClientSuppUMount
from @procServerExtract to @procClientSupp{}: tel client to mount supports as it need root privileges.

@item @eventServerNotifyQuery
from @procServerNotify{} to a remote @activityServerO{}: send a socket query providing local cache content index.

@item @eventScriptsDeliver 
@item @eventScriptsAudit
from @procServerDeliver to @procScriptsDeliver or @procScriptsAudit{}: respectively notify archive availability to @actorUserO{} or audit an archive.

@end table

@item Data in
@table @code
@item @dataConf
@itemx @dataServers
@itemx @dataExtract
@itemx @dataSupp
@end table

@item Data in/out
@table @code
@item @dataChecksum
@end table
@end itemize

Return codes on @event{<@var{socket}>} messages:

@itemize @bullet
@item status (@code{X--})
@table @code
@item 1-- @dots{}
negative reply
@item 2-- @dots{}
ok
@item 3-- @dots{}
bad request
@item 4-- @dots{}
internal error
@end table

@item Generic messages (@code{-0-})
@table @code
@item 301 message parser error
@item 302 message without collection
@item 303 message from server '%s' not registered into %s collection
@item 304 message contains a record not related to author %s but %s
@item 305 unknown message type: %s
@item 400 internal error
@item 401 fails to read message
@item 402 fails to load %s collection's serverTree
@item 403 fails to get localhost
@end table

@item @procServerUpload messages (@code{-1-})
@table @code
@item 210 ok
@item 310 empty message
@item 332 message do not provide a final supply %s
@item 313 already exists %s:%lli
@end table

@item @procServerCgiSrv messages (@code{-2-})
@table @code
@item 120 not found %s:%lli
@item 220 ok %s/%s
@item 221 ok
@item 320 empty message
@end table

@item @procServerHave messages (@code{-3-})
@table @code
@item 230 ok
@item 330 empty message
@item 331 message do not provide a final supply %s
@end table

@item @procServerNotify messages (@code{-4-})
@table @code
@item 240 ok
@end table
@end itemize

Code:
@table @file
@item src/server/threads.c
@itemx src/mediatexd.c
@end table

@node cache
@subsection cache
@include cache.texi
@node extract
@subsection extract
@include extract.texi
@node cgiServer
@subsection cgiServer
@include cgiServer.texi
@node have
@subsection have
@include have.texi
@node srvUpload
@subsection srvUpload
@include srvUpload.texi
@node notify
@subsection notify
@include notify.texi
@node delivering
@subsection delivering
@include delivering.texi
