@cindex Checksums

@activityServer{} backup its collection's status into the @dataChecksumO{} file.
When @actorPublisherO{} or @activityClientO{} want to read the lastest status, they need to ask @activityServerO{} the refresh this file.

The Messages the @procScriptsCgi{}, @procClientSupp{} and 
@procServerNotify{} processes exchange via socket are using the same 
grammar language. There is  type for such messages:
@itemize @bullet
@item @code{DISK}: used to serialize the @dataChecksumO{} file
@item @code{NOTIFY}: used by @activityServerO{}s to talk each others
@item @code{UPLOAD}: used to add new incoming archives
@item @code{CGI}: used by @procScriptsCgi{} to send @actorUserO{} queries 
@item @code{HAVE}: used when @actorPublisherO{} notify that a support is provided
@end itemize

These messages are cyphered using @acronym{AES} algorithm and a key defined into @dataServers{} file. @*
When loaded into memory, such messages are handled using the following relational schema:

@image{mediatex-figures/mdtx-COLL.md5,,,,}

@itemize @bullet
@item Proper entities
@itemize @bullet
@item The @sc{Record} entity lists all informations we need to load/save and exchange about archives.
@todo @mediatexO{} should use an hash table to manage records to speed-up cache management.
@end itemize

There is 7 types of records
@multitable @columnfractions .25 .15 .15 .25
@headitem Type @tab type @tab host @tab extra 
@item @code{FINAL_DEMAND} @tab D @tab local @tab mail
@item @code{LOCAL_DEMAND} @tab D @tab local @tab @code{!wanted}
@item @code{REMOTE_DEMAND} @tab D @tab remote @tab @code{!wanted}
@item @code{FINAL_SUPPLY} @tab S @tab local @tab absolute path
@item @code{MALLOC_SUPPLY} @tab S @tab local @tab @code{!malloc} 
@item @code{LOCAL_SUPPLY} @tab S @tab local @tab relative path 
@item @code{REMOTE_SUPPLY} @tab S @tab remote @tab relative path
@end multitable

@note{} for @code{FINAL_SUPPLY} the extra field is more accurately @code{@var{path1}[:@var{path2}]}, where:
@itemize @bullet
@item @var{path1} is the absolute path of an external file (archive to upload or available support),
@item @var{path2} is a potential relative path to the place where the file should be copied into the cache.
@end itemize

The @code{MALLOC_SUPPLY} is an internal state used when allocating the archive's data file into the @activityServerO{}'s cache.

@item Linked entities
@itemize @bullet
@item 
The @sc{Archive} entity reminds all archives the programm is currently using per collection.
@item
The @sc{Server} entity, from 
@dataServers{}, lists all the remote servers per collection.
@end itemize

@item Relations
@itemize @bullet
@item 
The @sc{localSupply} relationhip gives the archive's file when available (@code{LOCAL_DEMAND}) on the local cache.
@item 
The @sc{finalSupplies} relationhip lists supports presentely available on local host (@code{FINAL_SUPPLY}).
@item 
The @sc{remoteSupplies} relationhip lists all archives available remotely (@code{REMOTE_SUPPLY}) from the other @activityServerO{}.
@item 
The @sc{demands} relationhip lists all demand (@code{FINAL_DEMAND}, @code{LOCAL_DEMAND} and @code{REMOTE_DEMAND}) for an archive
@end itemize
@end itemize

All the time cache is loaded, archive objects are never free but eventually marked as deleted.
The cache @acronym{api} is thread safe. 3 locks are used in order to allow concurrent access:
@enumerate
@item MUTEX_ALLOC: when modifying the cache size
@item MUTEX_COMPUTE: when computing archive state
@item MUTEX_KEEP: when adjusting the archive time to live into the cache
@item MUTEX_TARGET: when creating a new target file
@end enumerate

Example:@*
@example
Headers
  Collection hello               
  Type       DISK
  Server     adc2f7b78c43354df5a86efae3dfe562
  DoCypher   FALSE            
Body          
#                date    host    hash   size extra
D 2015-10-04,23:40:13 adc2@dots{} 022a@dots{}  24075 test@@test.org
S 2015-10-04,23:40:28 adc2@dots{} 1a16@dots{}  20480 logoP1.cat
S 2015-10-04,23:40:24 aed9@dots{} 1a16@dots{}  20480 logoP1.cat
S 2015-10-04,23:34:30 adc2@dots{} 99b8@dots{}   1004 2015-10/mediatex.css
@end example

Grammar:
@example
file: //empty file 
    | header
    | header lines

header: HEADERS hLines BODY

hLines: hLines hLine
     | hLine

hLine: COLLECTION string
     | SERVER string
     | TYPE msgval
     | DOCYPHER bool

lines: lines newLine
     | newLine

newLine: line

line: type date hash hash [[:digit:]]+ string

msgval: DISK | CGI | HAVE | NOTIFY | UPLOAD
bool: FALSE | TRUE
type: S | D

date:   @{year@}-@{month@}-@{day@},@{HOUR@}:@{min@}:@{sec@}

year:   [[:digit:]]@{4@}
month:  [[:digit:]]@{2@}
day:    [[:digit:]]@{2@}
HOUR:   [[:digit:]]@{2@}
min:    [[:digit:]]@{2@}
sec:    [[:digit:]]@{2@}

hash:   [[:xdigit:]]@{32@}
string: [^[:blank:]\r\n]@{1,511@}
@end example

Code:
@table @file
@item src/misc/cypher.c
@itemx src/memory/archiveTree.h
@itemx src/memory/archiveTree.c
@itemx src/memory/recordTree.h
@itemx src/memory/recordTree.c
@itemx src/parser/recordFile.l
@itemx src/parser/recordFile.y
@itemx src/common/openClose.c
@end table

This code is use to get the record's type:@*
@example
RecordType rc = UNDEF_RECORD;

switch (self->type & 0x3) @{
case DEMAND:
  if (!self->server->isLocalhost)  
    rc = REMOTE_DEMAND;
  else if (self->extra[0] != '!')
    rc = FINAL_DEMAND;
  else if (self->extra[1] == 'w')
    rc = LOCAL_DEMAND;
  break;

case SUPPLY:
  if (!self->server->isLocalhost)  
    rc = REMOTE_SUPPLY;
  else if (self->extra[0] == '/')
    rc = FINAL_SUPPLY;
  else if (self->extra[0] != '!')
    rc = LOCAL_SUPPLY;
  else if (self->extra[1] == 'm')
    rc = MALLOC_SUPPLY;
  break;
@}
@end example

