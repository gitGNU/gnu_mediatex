@cindex serv

The @process{Serv} maintains the integrity of the meta-data files.
Moreover, it manage a perennial score on every archives.

@itemize @bullet
@item 
A local image's score is updated into @dataServers{} by each servers.
It is computed by summing the local support's scores computed by @procClientSupp{}.

@image{mediatex-figures/score2,,,,}

@math{imageScore(x) = \min {(\sum_{i=1}^N supportScore(x_i)} , M)}

When there are many local supports burned from the same image, 
this sum may be greater than the maximum score, so we truncate it.

@item
The server score equals the worst local image's score on the server.

@math{serverScore(x) = \min_{i=1..N} imageScore(x_i)}

@item
An archive score is computed from all local and remote images:

@image{mediatex-figures/score3,,,,}

@math{archiveScore(x) = \min {({\sum_{i=1}^N imageScore(x_i) \over d}}, M)}
@*
where: (default value)
@table @math
@item d = 2
is the minimum number of geographical duplication required
@item M = 10.00
is the maximum score
@end table

When there are more image geographically duplicated than required,
this sum may be greater than the maximum score, so we truncate it.

Next, archive's scores are computed recursively:
@itemize @bullet
@item 
using @math{\max} when archive is provided by several containers,
@item 
or using @math{\min} when archive comes from combined containers (CAT or RAR).
@end itemize

@item
Finally, the global collection score equals to the worst 
archive score. @*
@math{collectionScore = \min_{i=1..N} archiveScore(x_i)}
@end itemize

Process conceptual model:

@image{mediatex-figures/serv,,,,}

@itemize @bullet
@item Events in
@table @code

@item @eventClientServAddKey
@itemx @eventClientServDelKey
@itemx @eventClientServUpgrade
from @actorPublisher{}: manage collection settings.

@item @eventClientServUpgradeCall
from @procClientConf{}: upgrade the meta-data.

@end table
@item Processing
@itemize @bullet
@item 
The upgrade processing is automatically raised when needed.
However it permit to force an upgrade now, which may be useful when modifying manually the configuration files.
@item
Adding a key will add a server entry into the @dataServersO file and so, allow connections (subscription, synchronisations, copies) from a new remote server to this collection directory on every servers already added.
@end itemize

@item Data in/out
@itemize @bullet
@item @dataConf
@item @dataServers
@end itemize

@item Data out
@table @file
@item @dataServers
@itemx ~mdtx-COLL/.ssh/authorized_keys
@itemx ~mdtx-COLL/.ssh/known_host
@itemx ~mdtx-COLL/.ssh/config
@end table
@end itemize

Examples:
@itemize @bullet
@item Join an already existing collection: @pxref{Scenario 5}.
@item Synchronise servers together via upgrade query: @pxref{Scenario 4}.
@end itemize

Code:
@table @file
@item src/common/ssh.c
@itemx src/common/upgrade.c
@itemx src/common/extractScore.c
@itemx src/client/serv.c
@end table
