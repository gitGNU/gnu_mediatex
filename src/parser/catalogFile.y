/*=======================================================================
 * Version: $Id: catalogFile.y,v 1.3 2015/06/03 14:03:51 nroche Exp $
 * Project: MediaTeX
 * Module : catalogFile parser
 *
 * catalog parser

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

/* prologue: =======================================================*/
%{
#include "../mediatex.h"
#include "../misc/log.h"
#include "../misc/locks.h"
#include "../memory/ardsm.h"
#include "../memory/catalogTree.h"

// hack because Flex needs YYSTYPE from tab.h and Bison needs yyscan_t from .h
typedef void* yyscan_t;
%}

%union {
  off_t  size;
  char   string[MAX_SIZE_STRING+1];
  char   hash[MAX_SIZE_HASH+1];
  Category* category;
  Human*    human;
  Document* document;
  Archive*  archive;
}

%{
// we need YYSTYPE defined first to include the Flex headers
#include "catalogFile.h"

#define LINENO cata_get_lineno(yyscanner)
  
void cata_error(yyscan_t yyscanner, Collection* coll, Category* category,
		Human* human, Document* document, Archive* archive,
		const char* message);
%}

%code provides {
/*=======================================================================
 * Version: this file is generated by BISON using catalogFile.y
 * Project: MediaTeX
 * Module : catalogFile parser
 *
 * catalog parser

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
  #include "../memory/catalogTree.h"
  int parseCatalogFile(Collection* coll, const char* path);
}

/* declarations: ===================================================*/
%defines "catalogFile.tab.h"
%output "catalogFile.tab.c"
%define api.prefix {cata_}
%define api.pure full
%param {yyscan_t yyscanner}
%parse-param {Collection* coll} {Category* category} {Human* human}
 {Document* document} {Archive* archive}
%define parse.error verbose
%verbose
%debug

%start file

%token            catHUMCARAC
%token            catCONCARAC
%token            catRECCARAC
%token            catDOCCARAC
%token            catTOP
%token            catCATEGORY
%token            catROLE
%token            catHUMAN
%token            catDOCUMENT
%token            catWITH
%token            catARCHIVE
%token            catCOLON
%token            catEQUAL
%token            catDOT
%token            catCOMMA
%token <hash>     catHASH
%token <size>     catNUMBER
%token <string>   catSTRING

%type <category>  newCategory
%type <category>  category
%type <human>     human
%type <document>  document
%type <archive>   archive     

%%

/* grammar rules: ==================================================*/

file: stanzas 
    | //empy file 
{
  logParser(LOG_WARNING, "%s", "the catalog file was empty");
}

stanzas: stanzas stanza
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "stanzas: stanzas stanza");
}
       | stanza
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "stanzas: stanza");
}
;

stanza: defCategory
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "stanza: defCategory");
}
      | defHuman
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "stanza: defHuman");
}
      | defDocument
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "stanza: defDocument");
}
      | defArchive
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "stanza: deFaRCHIVE");
}
;

/* Carac */

cateCaracs: cateCaracs cateCarac
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "cateCaracs: cateCaracs cateCarac");
}
          | cateCarac
{
 logParser(LOG_INFO, "line %i: %s", LINENO, "cateCaracs: cateCarac");
}

cateCarac: catSTRING catEQUAL catSTRING
{
  Carac* carac = 0;
  logParser(LOG_INFO, "line %i: cateCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, CATE, category, $3)) YYERROR;
}

docCaracs: docCaracs docCarac
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCaracs: docCaracs docCarac");
}
         | docCarac
{
 logParser(LOG_INFO, "line %i: %s", LINENO, "docCaracs: docCarac");
}

docCarac: catSTRING catEQUAL catSTRING
{
  Carac* carac = 0;
  logParser(LOG_INFO, "line %i: docCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, DOC, document, $3)) YYERROR;
}

humCaracs: humCaracs humCarac
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "humCaracs: humCaracs humCarac");
}
         | humCarac
{
 logParser(LOG_INFO, "line %i: %s", LINENO, "humCaracs: humCarac");
}

humCarac: catSTRING catEQUAL catSTRING
{
  Carac* carac = 0;
  logParser(LOG_INFO, "line %i: humCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, HUM, human, $3)) YYERROR;
}

archCaracs: archCaracs archCarac
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "archCaracs: archCaracs archCarac");
}
         | archCarac
{
 logParser(LOG_INFO, "line %i: %s", LINENO, "archCaracs: archCarac");
}

archCarac: catSTRING catEQUAL catSTRING
{
  Carac* carac = 0;
  logParser(LOG_INFO, "line %i: archCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, ARCH, archive, $3)) YYERROR;
}

/* defCategory */

defCategory: newCategory catCOLON categories cateCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newCategory : category caracs");
  category = 0;
}
            | newCategory catCOLON categories
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newCategory : category");
  category = 0;
}
            | newCategory cateCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newCategory cateCaracs");
  category = 0;
}
            | newCategory
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "newCategory");
  category = 0;
}
;

newCategory: catTOP catCATEGORY catSTRING
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newCategory: TOP CATEGORY category");
  if (!($$ = addCategory(coll, $3, TRUE))) YYERROR;
  category = $$;
}
           | catCATEGORY catSTRING
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newCategory: CATEGORY category");
  if (!($$ = addCategory(coll, $2, FALSE))) YYERROR;
  category = $$;
}

categories: categories catCOMMA category
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "categories: categories , category");
  if (!addCategoryLink(coll, $3, category)) YYERROR;
}
          | category
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "categories: category");
  if (!addCategoryLink(coll, $1, category)) YYERROR;
}
;

category: catSTRING
{
  logParser(LOG_INFO, "line %i: category: %s", LINENO, $1);
  if (!($$ = addCategory(coll, $1, FALSE))) YYERROR;
}
;

/* defHuman */

defHuman: newHuman catCOLON humCategories humCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defHuman: newHuman catCOLON humCategories humCaracs");
  human = 0;
}
        | newHuman catCOLON humCategories
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defHuman: newHuman : humCategories");
  human = 0;
}
        | newHuman humCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defHuman: newHuman humCaracs");
  human = 0;
}
        | newHuman
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "defHuman: newHuman");
  human = 0;
}
;

newHuman: catHUMAN human
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newHuman: catHUMAN human");
  human = $2;
}
;

human: catSTRING catSTRING
{
    logParser(LOG_INFO, "line %i: human: %s %s", LINENO, $1, $2);
    if (!($$ = addHuman(coll, $1, $2))) YYERROR;
}
;

humCategories: humCategories catCOMMA category
{
  logParser(LOG_INFO, "line %i: %s", LINENO,
	    "humCategories: humCategories , category");
  if (!addHumanToCategory(coll, human, $3)) YYERROR;
}
          | category
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "humCategories: category");
  if (!addHumanToCategory(coll, human, $1)) YYERROR;
}
;

/* defArchive */

defArchive: newArchive archCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defArchive: newArchive caracs");
  archive = 0;
}
         | newArchive
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defArchive: neWArchive");
  archive = 0;
}
;

newArchive: catARCHIVE archive
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newArchive: catARCHIVE archive");
  archive = $2;
}
;

archive: catHASH catCOLON catNUMBER
{
  logParser(LOG_INFO, "line %i: archive: %s:%lli", LINENO, $1, $3);
  if (!($$ = addArchive(coll, $1, $3))) YYERROR;
}
;

/* defDocument */

defDocument: newDocument docCategories2 docWiths docCaracs2 docArchives 
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "defDocument: newDocument docCategories "
	    "docWiths docCaracs docArchives");
  document = 0;
}
;

newDocument: catDOCUMENT document
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "newDocument: catDOCUMENT document");
  document = $2;
}
;

document: catSTRING
{
  logParser(LOG_INFO, "line %i: document: %s", LINENO, $1);
  if (!($$ = addDocument(coll, $1))) YYERROR;
}
;

docCategories2: catCOLON docCategories
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCategories2: : docCategories");
}
             | 
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCategories: nil");
}
;

docCategories: docCategories catCOMMA category
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCategories: docCategories , category");
  if (!addDocumentToCategory(coll, document, $3)) YYERROR;
}
          | category
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCategories: category");
  if (!addDocumentToCategory(coll, document, $1)) YYERROR;
}
;

docCaracs2: docCaracs
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCaracs2: docCaracs");
}
          | 
{
  logParser(LOG_INFO, "line %i: %s", LINENO, 
	    "docCaracs2: (0)");
}
;

docWiths: roles
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "docWiths: roles");
}
       | 
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "docWiths: (0)");
}

roles: roles role
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "roles: roles role");
}
      | role
{
 logParser(LOG_INFO, "line %i: %s", LINENO, "roles: role");
}

role: catWITH catSTRING catEQUAL human
{
  Role* role = 0;
  logParser(LOG_INFO, "line %i: role: WITH %s = human", LINENO, $2);
  if (!(role = addRole(coll, $2))) YYERROR;
  if (!addAssoRole(coll, role, $4, document)) YYERROR;
}

docArchives: archives
{
  logParser(LOG_INFO, "line %i: docArchives: archives", LINENO);
}
          | 
{
  logParser(LOG_INFO, "line %i: docArchives: (0)", LINENO);
}

archives: archives archive
{
  logParser(LOG_INFO, "line %i: %s", LINENO,
	    "archives: archives archive");
  if (!addArchiveToDocument(coll, $2, document)) YYERROR;
}
        | archive
{
  logParser(LOG_INFO, "line %i: %s", LINENO, "archives: archive");
 if (!addArchiveToDocument(coll, $1, document)) YYERROR;
}

%%

/* epilogue: =======================================================*/


/*=======================================================================
 * Function   : catalogFile_error
 * Description: Emit an error message. Called by the parser on error
 *              state.
 * Synopsis   : void catalogFile_error(char* message)
 * Input      : char* message = the error message.
 * Output     : N/A
 =======================================================================*/
void cata_error(yyscan_t yyscanner, Collection* coll, Category* category,
		Human* human, Document* document, Archive* archive,
		const char* message)
{
  logEmit(LOG_ERR, "%s on token '%s' line %i\n",
	  message, cata_get_text(yyscanner), LINENO);
}


/*=======================================================================
 * Function   : parseCatalogFile
 * Description: Parse the catalog
 * Synopsis   : int parseCatalogTree(const char* path, int debugFlag)
 * Input      : const char* catalog: the catalog path
 * Output     : TRUE on success
=======================================================================*/
int parseCatalogFile(Collection* coll, const char* path)
{
  int rc = FALSE;
  FILE* inputStream = stdin;
  yyscan_t scanner;
  Category* category = 0;
  Human*    human = 0;
  Document* document = 0;
  Archive*  archive = 0;
  
  checkCollection(coll);
  logParser(LOG_INFO, "parse %s catalog", coll->label);

  // initialise scanner
  if (cata_lex_init(&scanner)) {
    logEmit(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }

  // scan input file if defined (else stdin)
  inputStream = stdin;
  if (path != 0) {
    if ((inputStream = fopen(path, "r")) == 0) {
      logEmit(LOG_ERR, "cannot open input stream: %s", path); 
      goto error;
    }
    if (!lock(fileno(inputStream), F_RDLCK)) goto error;
    logEmit(LOG_DEBUG, "parse catalog file: %s", path);
  }
  cata_set_in(inputStream, scanner);

  // debug mode for scanner
  cata_set_debug(env.debugLexer, scanner);
  logEmit(LOG_DEBUG, "cata_set_debug = %i", cata_get_debug(scanner));

  // call the parser
  if (cata_parse(scanner, coll, category, human, document, archive)) {
    logEmit(LOG_ERR, "catalog file parser error on line %i",
	    cata_get_lineno(scanner));
    logEmit(LOG_ERR, "please edit %s", path);
    goto error;
  }

  if (inputStream != stdin) {
    if (!unLock(fileno(inputStream))) goto error;
    fclose(inputStream);
  }
  rc = TRUE;
 error:
  cata_lex_destroy(scanner);
  return rc;
}

/************************************************************************/

#ifdef utMAIN
#include "../misc/command.h"
#include "confFile.tab.h"
GLOBAL_STRUCT_DEF;

/*=======================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program; usually argv[0].
 * Output     : N/A
 =======================================================================*/
static void 
usage(char* programName)
{
  parserUsage(programName);
  fprintf(stderr, " [ -i inputPath ]");
  
  parserOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --input\t\tinput file to parse\n");
  return;
}


/*=======================================================================
 * Function   : main 
 * Author     : Nicolas ROCHE
 * modif      : 2012/05/01
 * Description: unitary test for this parser module
 * Synopsis   : ./utcatalogFile.tab
 * Input      : -i inputPath
 * Output     : Should display the same content
 =======================================================================*/
int 
main(int argc, char** argv)
{
  Configuration* conf = (Configuration*)conf;
  Collection* coll = 0;
  char* inputPath = 0;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = PARSER_SHORT_OPTIONS"i:";
  struct option longOptions[] = {
     {"input", required_argument, 0, 'i'},
    PARSER_LONG_OPTIONS,
    {0, 0, 0, 0}
  };

  // import mdtx environment
  env.debugParser = TRUE;
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, 0)) 
	!= EOF) {
    switch(cOption) {
      
    case 'i':
      if(isEmptyString(optarg)) {
	fprintf(stderr, 
		"%s: nil or empty argument for the input stream\n",
		programName);
	rc = 2;
      }
      else {
	if ((inputPath = (char*)malloc(sizeof(char) * strlen(optarg) + 1))
	    == 0) {
	  fprintf(stderr, 
		  "%s: cannot allocate memory for the input stream name\n", 
		  programName);
	  rc = 3;
	}
	else {
	  strcpy(inputPath, optarg);
	}
      }
      break;
		
      GET_PARSER_OPTIONS; // generic options
    }
    if (rc) goto optError;
  }

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;

  /************************************************************************/
  if (!(conf = getConfiguration())) goto error;
  if (!parseConfiguration(conf->confFile)) goto error;
  if (!(coll = getCollection("coll1"))) goto error;
  if (!expandCollection(coll)) goto error;

  if (!parseCatalogFile(coll, inputPath)) goto error;
  if (!serializeCatalogTree(coll)) goto error;
  /************************************************************************/

  rc = TRUE;
 error:
  freeConfiguration();
  destroyString(inputPath);
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
}
 
#endif // utMAIN

/* Local Variables: */
/* mode: c *//* mode: font-lock */
/* mode: auto-fill */
/* End: */
