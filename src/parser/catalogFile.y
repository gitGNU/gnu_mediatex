/*=======================================================================
 * Version: $Id: catalogFile.y,v 1.6 2015/07/28 11:45:48 nroche Exp $
 * Project: MediaTeX
 * Module : catalog parser
 *
 * catalog file parser

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

/* prologue: ===========================================================*/

%code provides {
/*=======================================================================
 * Version: this file is generated by BISON using catalogFile.y
 * Project: MediaTeX
 * Module : catalogFile parser
 *
 * catalog file parser

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

#define YYSTYPE CATA_STYPE
}

%{  
#include "mediatex-config.h"
  /* yyscan_t is pre-defined by mediatex-config.h and will be defined
     by Flex header bellow */
%}

%union {
  off_t  size;
  char   string[MAX_SIZE_STRING+1];
  char   hash[MAX_SIZE_HASH+1];
  Category* category;
  Human*    human;
  Document* document;
  Archive*  archive;
}

%{
  // upper YYSTYPE union is required by Flex headers
#include "parser/catalogFile.h"

#define LINENO cata_get_lineno(yyscanner)

void cata_error(yyscan_t yyscanner, Collection* coll, Category* category,
		Human* human, Document* document, Archive* archive,
		const char* message);
%}


/* declarations: =======================================================*/
%defines "parser/catalogFile.tab.h"
%output "parser/catalogFile.tab.c"
%define api.prefix {cata_}
%define api.pure full
%param {yyscan_t yyscanner}
%parse-param {Collection* coll} {Category* category} {Human* human}
 {Document* document} {Archive* archive}
%define parse.error verbose
%verbose
%debug

%start file

%token            cataERROR
%token            cataTOP
%token            cataCATEGORY
%token            cataDOCUMENT
%token            cataHUMAN
%token            cataWITH
%token            cataARCHIVE
%token            cataEQUAL
%token            cataCOLON
%token            cataCOMMA
%token <hash>     cataHASH
%token <size>     cataNUMBER
%token <string>   cataSTRING

%type <category>  newCategory
%type <category>  category
%type <human>     human
%type <document>  document
%type <archive>   archive     

%%

/* grammar rules: ==================================================*/

file: stanzas 
    | //empy file 
{
  logParser(LOG_WARNING, "the catalog file was empty");
}

stanzas: stanzas stanza
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "stanzas: stanzas stanza");
}
       | stanza
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "stanzas: stanza");
}
;

stanza: defCategory
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "stanza: defCategory");
}
      | defHuman
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "stanza: defHuman");
}
      | defDocument
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "stanza: defDocument");
}
      | defArchive
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "stanza: deFaRCHIVE");
}
;

/* Carac */

cateCaracs: cateCaracs cateCarac
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "cateCaracs: cateCaracs cateCarac");
}
          | cateCarac
{
 logParser(LOG_DEBUG, "line %i: %s", LINENO, "cateCaracs: cateCarac");
}

cateCarac: cataSTRING cataEQUAL cataSTRING
{
  Carac* carac = 0;
  logParser(LOG_DEBUG, "line %i: cateCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, CATE, category, $3)) YYERROR;
}

docCaracs: docCaracs docCarac
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCaracs: docCaracs docCarac");
}
         | docCarac
{
 logParser(LOG_DEBUG, "line %i: %s", LINENO, "docCaracs: docCarac");
}

docCarac: cataSTRING cataEQUAL cataSTRING
{
  Carac* carac = 0;
  logParser(LOG_DEBUG, "line %i: docCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, DOC, document, $3)) YYERROR;
}

humCaracs: humCaracs humCarac
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "humCaracs: humCaracs humCarac");
}
         | humCarac
{
 logParser(LOG_DEBUG, "line %i: %s", LINENO, "humCaracs: humCarac");
}

humCarac: cataSTRING cataEQUAL cataSTRING
{
  Carac* carac = 0;
  logParser(LOG_DEBUG, "line %i: humCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, HUM, human, $3)) YYERROR;
}

archCaracs: archCaracs archCarac
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "archCaracs: archCaracs archCarac");
}
         | archCarac
{
 logParser(LOG_DEBUG, "line %i: %s", LINENO, "archCaracs: archCarac");
}

archCarac: cataSTRING cataEQUAL cataSTRING
{
  Carac* carac = 0;
  logParser(LOG_DEBUG, "line %i: archCarac: %s = %s", LINENO, $1, $3);
  if (!(carac = addCarac(coll, $1))) YYERROR;
  if (!addAssoCarac(coll, carac, ARCH, archive, $3)) YYERROR;
}

/* defCategory */

defCategory: newCategory cataCOLON categories cateCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newCategory : category caracs");
  category = 0;
}
            | newCategory cataCOLON categories
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newCategory : category");
  category = 0;
}
            | newCategory cateCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newCategory cateCaracs");
  category = 0;
}
            | newCategory
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "newCategory");
  category = 0;
}
;

newCategory: cataTOP cataCATEGORY cataSTRING
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newCategory: TOP CATEGORY category");
  if (!($$ = addCategory(coll, $3, TRUE))) YYERROR;
  category = $$;
}
           | cataCATEGORY cataSTRING
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newCategory: CATEGORY category");
  if (!($$ = addCategory(coll, $2, FALSE))) YYERROR;
  category = $$;
}

categories: categories cataCOMMA category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "categories: categories , category");
  if (!addCategoryLink(coll, $3, category)) YYERROR;
}
          | category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "categories: category");
  if (!addCategoryLink(coll, $1, category)) YYERROR;
}
;

category: cataSTRING
{
  logParser(LOG_DEBUG, "line %i: category: %s", LINENO, $1);
  if (!($$ = addCategory(coll, $1, FALSE))) YYERROR;
}
;

/* defHuman */

defHuman: newHuman cataCOLON humCategories humCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defHuman: newHuman COLON humCategories humCaracs");
  human = 0;
}
        | newHuman cataCOLON humCategories
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defHuman: newHuman : humCategories");
  human = 0;
}
        | newHuman humCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defHuman: newHuman humCaracs");
  human = 0;
}
        | newHuman
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "defHuman: newHuman");
  human = 0;
}
;

newHuman: cataHUMAN human
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newHuman: HUMAN human");
  human = $2;
}
;

human: cataSTRING cataSTRING
{
    logParser(LOG_DEBUG, "line %i: human: %s %s", LINENO, $1, $2);
    if (!($$ = addHuman(coll, $1, $2))) YYERROR;
}
;

humCategories: humCategories cataCOMMA category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO,
	    "humCategories: humCategories , category");
  if (!addHumanToCategory(coll, human, $3)) YYERROR;
}
          | category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "humCategories: category");
  if (!addHumanToCategory(coll, human, $1)) YYERROR;
}
;

/* defArchive */

defArchive: newArchive archCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defArchive: newArchive caracs");
  archive = 0;
}
         | newArchive
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defArchive: neWArchive");
  archive = 0;
}
;

newArchive: cataARCHIVE archive
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newArchive: ARCHIVE archive");
  archive = $2;
}
;

archive: cataHASH cataCOLON cataNUMBER
{
  logParser(LOG_DEBUG, "line %i: archive: %s:%lli", LINENO, $1, $3);
  if (!($$ = addArchive(coll, $1, $3))) YYERROR;
}
;

/* defDocument */

defDocument: newDocument docCategories2 docWiths docCaracs2 docArchives 
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "defDocument: newDocument docCategories "
	    "docWiths docCaracs docArchives");
  document = 0;
}
;

newDocument: cataDOCUMENT document
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "newDocument: DOCUMENT document");
  document = $2;
}
;

document: cataSTRING
{
  logParser(LOG_DEBUG, "line %i: document: %s", LINENO, $1);
  if (!($$ = addDocument(coll, $1))) YYERROR;
}
;

docCategories2: cataCOLON docCategories
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCategories2: : docCategories");
}
             | 
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCategories: nil");
}
;

docCategories: docCategories cataCOMMA category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCategories: docCategories , category");
  if (!addDocumentToCategory(coll, document, $3)) YYERROR;
}
          | category
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCategories: category");
  if (!addDocumentToCategory(coll, document, $1)) YYERROR;
}
;

docCaracs2: docCaracs
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCaracs2: docCaracs");
}
          | 
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, 
	    "docCaracs2: (0)");
}
;

docWiths: roles
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "docWiths: roles");
}
       | 
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "docWiths: (0)");
}

roles: roles role
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "roles: roles role");
}
      | role
{
 logParser(LOG_DEBUG, "line %i: %s", LINENO, "roles: role");
}

role: cataWITH cataSTRING cataEQUAL human
{
  Role* role = 0;
  logParser(LOG_DEBUG, "line %i: role: WITH %s = human", LINENO, $2);
  if (!(role = addRole(coll, $2))) YYERROR;
  if (!addAssoRole(coll, role, $4, document)) YYERROR;
}

docArchives: archives
{
  logParser(LOG_DEBUG, "line %i: docArchives: archives", LINENO);
}
          | 
{
  logParser(LOG_DEBUG, "line %i: docArchives: (0)", LINENO);
}

archives: archives archive
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO,
	    "archives: archives archive");
  if (!addArchiveToDocument(coll, $2, document)) YYERROR;
}
        | archive
{
  logParser(LOG_DEBUG, "line %i: %s", LINENO, "archives: archive");
 if (!addArchiveToDocument(coll, $1, document)) YYERROR;
}

%%

/* epilogue: =======================================================*/


/*=======================================================================
 * Function   : catalogFile_error
 * Description: Emit an error message. Called by the parser on error
 *              state.
 * Synopsis   : void catalogFile_error(char* message)
 * Input      : char* message = the error message.
 * Output     : N/A
 =======================================================================*/
void cata_error(yyscan_t yyscanner, Collection* coll, Category* category,
		Human* human, Document* document, Archive* archive,
		const char* message)
{
  logParser(LOG_ERR, "%s on token '%s' line %i\n",
	  message, cata_get_text(yyscanner), LINENO);
}


/*=======================================================================
 * Function   : parseCatalogFile
 * Description: Parse the catalog
 * Synopsis   : int parseCatalogTree(Collection* coll, const char* path)
 * Input      : Collecxtion* coll: related collection
 *              const char* catalog: the catalog path
 * Output     : TRUE on success
=======================================================================*/
int parseCatalogFile(Collection* coll, const char* path)
{
  int rc = FALSE;
  FILE* inputStream = stdin;
  yyscan_t scanner;
  Category* category = 0;
  Human*    human = 0;
  Document* document = 0;
  Archive*  archive = 0;
  
  checkCollection(coll);
  logParser(LOG_INFO, "parse %s catalog from %s",
	    coll->label, path?path:"stdin");

  // initialise scanner
  if (cata_lex_init(&scanner)) {
    logParser(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }

  if (path != 0) {
    if ((inputStream = fopen(path, "r")) == 0) {
      logParser(LOG_ERR, "cannot open input stream: %s", path); 
      goto error;
    }
    if (!lock(fileno(inputStream), F_RDLCK)) goto error2;
  }

  cata_set_in(inputStream, scanner);

  // debug mode for scanner
  cata_set_debug(env.debugLexer, scanner);
  logParser(LOG_DEBUG, "cata_set_debug = %i", cata_get_debug(scanner));

  // call the parser
  if (cata_parse(scanner, coll, category, human, document, archive)) {
    logParser(LOG_ERR, "catalog parser fails on line %i",
	    cata_get_lineno(scanner));
    logParser(LOG_ERR, "please edit %s", path?path:"stdin");
    goto error3;
  }

  rc = TRUE;
 error3:
  if (inputStream != stdin) {
    if (!unLock(fileno(inputStream))) rc = FALSE;
  }
 error2:
  if (inputStream != stdin) {
    fclose(inputStream);
  }
 error:
  cata_lex_destroy(scanner);
  return rc;
}

/* Local Variables: */
/* mode: c *//* mode: font-lock */
/* mode: auto-fill */
/* End: */
