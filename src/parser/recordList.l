/*=======================================================================
 * Version: $Id: recordList.l,v 1.3 2015/06/03 14:03:52 nroche Exp $
 * Project: Mediatex
 * Module : recordList reentrant scanner

 * recordList scanner
 * Note: Please provide an archive by line from input file

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

   /* definitions: ====================================================*/

/* Options for Specifing Filenames: */
%option outfile="recordList.c"
%option header-file="recordList.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant 
%option bison-bridge
%option noc++
%option pointer
%option prefix="record_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

%top{
/*=======================================================================
* Version: this file is generated by LEX using recordList.l
 * Project: Mediatex
 * Module : recordList reentrant scanner

 * recordList scanner
 * Note: Please provide an archive by line from input file

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "../mediatex.h"
#include "../misc/log.h"
#include "../memory/strdsm.h"
#include "../misc/cypher.h"

typedef struct RecordExtra {
  AESData*       aesData;
} RecordExtra;
}

%{
#ifdef utMAIN
#define YYSTYPE void*

#else  	/*	: utMAIN	*/
#include "../memory/recordTree.h"
#include "recordList.tab.h"
#define YYSTYPE RECORD_STYPE

#define YY_INPUT(buf, result, max_size)					\
  aesInput(((RecordExtra*)yyextra)->aesData, buf, (int*)&result, max_size)
  
#endif	/*	: utMAIN	*/
%}

 /* scaner states */
%x COMMENT
%s STRING
%x STATE1
%x STATE2
%x STATE3
%x STATE4

 /* maccros */
YEAR    [[:digit:]]{4}
MONTH   [[:digit:]]{2}
DAY     [[:digit:]]{2}
HOUR    [[:digit:]]{2}
MIN     [[:digit:]]{2}
SEC     [[:digit:]]{2}
DATE    {YEAR}-{MONTH}-{DAY},{HOUR}:{MIN}:{SEC}

 /* Constants are not allowed there so we do it with yyless
    into the rules */

 /* MAX_SIZE_HASH = 32 */
HASH    [[:xdigit:]]{32}

 /* MAX_SIZE_COLL = 20 */
 //COLL    [^[:blank:]\r\n]+

%%
 /* rules: ==========================================================*/
   /* first rule: */

<INITIAL>{

  \/\* {
    BEGIN(COMMENT);
  }

  (\n|\r\n) 

  headers {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HEADER", yylineno);
#else	/*	: utMAIN	*/
    return(recordHEADER);
#endif	/*	: utMAIN	*/
  }

  collection {
    BEGIN(STRING);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: COLL", yylineno);
#else	/*	: utMAIN	*/
    return(recordCOLL);
#endif	/*	: utMAIN	*/
  }

  docypher {
    BEGIN(STRING);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: DOCYPHER", 
	    yylineno);
#else	/*	: utMAIN	*/
    return(recordDOCYPHER);
#endif	/*	: utMAIN	*/
  }

  server {
    BEGIN(STRING);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: TYPE", yylineno);
#else	/*	: utMAIN	*/
    return(recordSERVER);
#endif	/*	: utMAIN	*/
  }

  type {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: TYPE", yylineno);
#else	/*	: utMAIN	*/
    return(recordMSGTYPE);
#endif	/*	: utMAIN	*/
  }

  disk {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: DISK", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = DISK;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  cgi {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: CGI", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = CGI;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  have {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HAVE", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = HAVE;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  notify {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: NOTIFY", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = NOTIFY;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  upload {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: UPLOAD", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = UPLOAD;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  unknown {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: UNKNOWN", yylineno);
#else	/*	: utMAIN	*/
    yylval->msgval = UNKNOWN;
    return(recordMSGVAL);
#endif	/*	: utMAIN	*/
  }

  body {
    BEGIN(STATE1);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: BODY", yylineno);
#else	/*	: utMAIN	*/
    return(recordBODY);
#endif	/*	: utMAIN	*/
  }
}

<STRING>{

  [^[:blank:]\r\n]+ { 
    BEGIN(INITIAL);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: STRING ='%s'", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->string, yytext, yyleng);
    yylval->string[yyleng] = (char)0;
    return(recordSTRING);
#endif	/*	: utMAIN	*/
  }
 }

<STATE1>{

  (\n|\r\n) {
    ++yylineno;
  }

  -?[Ss] {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: TYPE = %ssupply", 
	    yylineno, yytext[0]=='-'?"- ":"");
#else	/*	: utMAIN	*/
    yylval->type = SUPPLY;
    //if (yytext[0] == '-') yylval->type |= REMOVE; // (no more used)
    return(recordTYPE);
#endif	/*	: utMAIN	*/
  }
  
  -?[Dd] {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: TYPE = %sdemand", 
	    yylineno, yytext[0]=='-'?"- ":"");
#else	/*	: utMAIN	*/
    yylval->type = DEMAND;
    //if (yytext[0] == '-') yylval->type |= REMOVE;
    return(recordTYPE);
#endif	/*	: utMAIN	*/
  }  
  
  {DATE} {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: DATE = %s", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    // date conversion into time_t
    struct tm date;
    memset(&date, 0, sizeof(struct tm));
    if (sscanf(yytext, "%d-%d-%d,%d:%d:%d",
	       &date.tm_year, &date.tm_mon, &date.tm_mday,
	       &date.tm_hour, &date.tm_min, &date.tm_sec)
	!= 6) {
      logEmit(LOG_ERR, "sscanf: error parsing date %s", yytext);
      return(recordERROR);
    }
    date.tm_year -= 1900; // from GNU/Linux burning date
    date.tm_mon -= 1;     // month are managed from 0 to 11 
    date.tm_isdst = -1;   // no information available about spring horodatage
    if ((yylval->time = mktime(&date)) == -1) {
      logEmit(LOG_ERR, "%s", "mktime: error parsing date");
      return(recordERROR);
    }
    return(recordDATE);
#endif	/*	: utMAIN	*/
  }

  {HASH} {
    BEGIN(STATE2);
    // force to take 32 char
    // else the ending digit are taken by the next token
    //if (yyleng != MAX_SIZE_HASH) yyless(MAX_SIZE_HASH);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HASH(1) =%s", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->hash, yytext, MAX_SIZE_HASH);
    yylval->hash[MAX_SIZE_HASH] = (char)0;
    return(recordHASH);
#endif	/*	: utMAIN	*/
  }
 }

<STATE2>{
  
  {HASH} {
    BEGIN(STATE3);
    // force to take 32 char
    // else the ending digit are taken by the next token
    if (yyleng != MAX_SIZE_HASH) yyless(MAX_SIZE_HASH);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HASH(2) =%s", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->hash, yytext, MAX_SIZE_HASH);
    yylval->hash[MAX_SIZE_HASH] = (char)0;
    return(recordHASH);
#endif	/*	: utMAIN	*/
  }
 }

<STATE3>{
  
  [[:digit:]]+ {
    off_t size = 0;
    BEGIN(STATE4);
    sscanf(yytext, "%llu", (unsigned long long int*)&size);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: SIZE =%lli", 
	    yylineno, size);
#else	/*	: utMAIN	*/
    yylval->size = size;
    return(recordSIZE);
#endif	/*	: utMAIN	*/
  }
 }  

<STATE4>{

  [^[:blank:]\r\n]+ { 
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: PATH ='%s'", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->string, yytext, yyleng);
    yylval->string[yyleng] = (char)0;
    return(recordPATH);
#endif	/*	: utMAIN	*/
  }

  (\n|\r\n) {
    BEGIN(STATE1);
    ++yylineno;
  }
 }
   
 /* <INITIAL,STATE2,STATE3,STATE4>{ */
<INITIAL,STRING,STATE1,STATE2,STATE3,STATE4>{
  [[:blank:]]+    /* : eat up any blank character */
    ^#.*$         /* : eat up comments */
    \/\/.*$       /* : eat up comments */
 }

<COMMENT>{
  [^\n\r]  /* : eat up any unmatched character */
  
  \*\/ {
    BEGIN(INITIAL);
  }
 }
   
<*>{
  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
#ifdef utMAIN
    return -1;
#endif	/*	: utMAIN	*/
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/
   
/************************************************************************/

#ifdef utMAIN
#include "../misc/command.h"
#include <sys/types.h> //
#include <sys/stat.h>  // open 
#include <fcntl.h>     //
GLOBAL_STRUCT_DEF;

/*=======================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program; usually argv[0].
 * Output     : N/A
 =======================================================================*/
static void 
usage(char* programName)
{
  parserUsage(programName);
  fprintf(stderr, " [ -i inputPath ]");

  parserOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --input\t\tinput file to parse\n");
  return;
}


/*=======================================================================
 * Function   : main 
 * Author     : Nicolas ROCHE
 * modif      : 2012/05/01
 * Description: Unit test for recordList module.
 * Synopsis   : ./utrecordList
 * Input      : stdin
 * Output     : stdout

 * Note       : cannot scan cryted input as key is loaded by parser
 =======================================================================*/
int 
main(int argc, char** argv)
{
  char* inputPath = 0;
  int inputFd = -1;
  FILE* inputStream = stdin;
  RecordExtra extra;
  yyscan_t scanner;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = PARSER_SHORT_OPTIONS"i:";
  struct option longOptions[] = {
    {"input", required_argument, 0, 'i'},
    PARSER_LONG_OPTIONS,
    {0, 0, 0, 0}
  };

  // import mdtx environment
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, 0)) 
	!= EOF) {
    switch(cOption) {
      
    case 'i':
      if(isEmptyString(optarg)) {
	fprintf(stderr, 
		"%s: nil or empty argument for the input stream\n",
		programName);
	rc = 2;
      }
      else {
	if ((inputPath = (char*)malloc(sizeof(char) * strlen(optarg) + 1))
	    == 0) {
	  fprintf(stderr, 
		  "%s: cannot allocate memory for the input stream name\n", 
		  programName);
	  rc = 3;
	}
	else {
	  strcpy(inputPath, optarg);
	}
      }
      break;
		
      GET_PARSER_OPTIONS; // generic options
    }
    if (rc) goto optError;
  }

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;

  /************************************************************************/
  // init scanner
  if (record_lex_init (&scanner)) {
    logEmit(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }
  record_set_debug(env.debugLexer, scanner);
  logEmit(LOG_DEBUG, "record_set_debug = %i", 
	  record_get_debug(scanner));
  
  // scan stdin or input file if defined
  if (!isEmptyString(inputPath)) {
    if ((inputFd = open(inputPath, O_RDONLY)) == 0) {
      logEmit(LOG_ERR, "cannot open input file: %s", inputPath); 
      goto error;
    }
    
    if ((inputStream = fdopen(inputFd, "r")) == 0) {
      logEmit(LOG_ERR, "%s", "fdopen failed");
      goto error;
    }
    record_set_in(inputStream, scanner);
  }
  
  // call scanner 
  extra.aesData = 0;
  record_set_extra (&extra, scanner);  //in GDB: print *(RecordExtra*)yyg->yyextra_r
  if (record_lex(0, scanner)) goto error;
  record_lex_destroy(scanner);
  fclose(inputStream);
  /************************************************************************/

  destroyString(inputPath);
  rc = TRUE;
 error:
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
}
 
#endif // utMAIN

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */

