/*=======================================================================
 * Version: $Id: extractFile.l,v 1.4 2015/06/30 17:37:36 nroche Exp $
 * Project: Mediatex
 * Module : extract scanner

 * extraction meta-data scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

%top{
/*=======================================================================
 * Version: this file is generated by LEX using extractFile.l
 * Project: Mediatex
 * Module : extract scanner

 * extraction meta-data scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}

%{
#include "mediatex-config.h"
#include "parser/extractFile.tab.h"
%}

/* definitions: ========================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/extractFile.c"
%option header-file="parser/extractFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="extr_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

/* scaner states */
%x COMMENT
%x CONTAINERS
%x CONTENTS
%x PATH

 /* No way to use constants from a c header file */

 /* MAX_SIZE_HASH = 32 */
HASH    [[:xdigit:]]{32}

 /* MAX_SIZE_STRING = 511 */
STRING  [^[:blank:]:,\)\n\r]{1,511}

%%
   /* rules: ==========================================================*/

 /* first rule: */
<INITIAL>{

  \( {
    return(extrOPEN);
  }

  rec {
    BEGIN(CONTAINERS);
    yylval->type = REC;
    return(extrTYPE);
  }

  iso {
    BEGIN(CONTAINERS);
    yylval->type = ISO;
    return(extrTYPE);
  }
  
  cat {
    BEGIN(CONTAINERS);
    yylval->type = CAT;
    return(extrTYPE);
  }

  tgz {
    BEGIN(CONTAINERS);
    yylval->type = TGZ;
    return(extrTYPE);
  }

  tbz {
    BEGIN(CONTAINERS);
    yylval->type = TBZ;
    return(extrTYPE);
  }

  afio {
    BEGIN(CONTAINERS);
    yylval->type = AFIO;
    return(extrTYPE);
  }

  tar {
    BEGIN(CONTAINERS);
    yylval->type = TAR;
    return(extrTYPE);
  }

  cpio {
    BEGIN(CONTAINERS);
    yylval->type = CPIO;
    return(extrTYPE);
  }

  gzip {
    BEGIN(CONTAINERS);
    yylval->type = GZIP;
    return(extrTYPE);
  }

  bzip {
    BEGIN(CONTAINERS);
    yylval->type = BZIP;
    return(extrTYPE);
  }

  zip {
    BEGIN(CONTAINERS);
    yylval->type = ZIP;
    return(extrTYPE);
  }

  rar {
    BEGIN(CONTAINERS);
    yylval->type = RAR;
    return(extrTYPE);
  }

 }

<CONTAINERS,CONTENTS>{

  : {
    return(extrCOLON);
  }
  
  {HASH} {
    strcpy(yylval->hash, yytext);
    return(extrHASH);
  }

  \) {
    BEGIN(INITIAL);
    return(extrCLOSE);
  }
 }

<CONTAINERS>{

  => {
    BEGIN(CONTENTS);
    return(extrIMPLIES);
  }

  [[:digit:]]+ {
    sscanf(yytext, "%llu", &yylval->size);
    return(extrSIZE);
  }
 }

<CONTENTS>{

  [[:digit:]]+ {
     BEGIN(PATH);
    sscanf(yytext, "%llu", &yylval->size);
    return(extrSIZE);
  }
 }

<PATH>{

  {STRING} {
    BEGIN(CONTENTS);
    strcpy(yylval->string, yytext);
    return(extrSTRING);
  }
 }

<COMMENT>{

  [^\n\r]    /* : eat up any unmatched character */
  
  \*\/ {
    BEGIN(INITIAL);
  }

 } 
   
<*>{

  [[:blank:]]+  /* : eat up any blank character */
  ^#.*$         /* : eat up comments */
  \/\/.*$       /* : eat up comments */

  \/\* {
    BEGIN(COMMENT);
  }
  
  (\n|\r\n) {
    ++env.progBar.cur;
  }

  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
