/*=======================================================================
 * Version: $Id: catalogFile.l,v 1.4 2015/06/30 17:37:35 nroche Exp $
 * Project: Mediatex
 * Module : catalog scanner

 * catalog scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

%top{
/*=======================================================================
 * Version: this file is generated by LEX using catalogtFile.l
 * Project: Mediatex
 * Module : catalog scanner

 * catalog scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}

%{
#include "mediatex-config.h"
#include "parser/catalogFile.tab.h"
%}

/* definitions: ========================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/catalogFile.c"
%option header-file="parser/catalogFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="cata_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput
   
 /* scaner states */
%x Comment

 /* No way to use constants from a c header file */

 /* MAX_SIZE_HASH = 32 */
HASH           [[:xdigit:]]{32}     

 /* MAX_SIZE_STRING = 511
     allow \" escape sequences */
QUOTED_STRING  \"(\\\"|[^\n\"]){0,511}\" 

%%
   /* rules: ==========================================================*/
   /* first rule: */

<INITIAL>{

  top {
    return(cataTOP);
  }

  category {
    return(cataCATEGORY);
  }
	
  document {
    return(cataDOCUMENT);
  }
  
  human {
    return(cataHUMAN);
  }
  
  with {
    return(cataWITH);
  }
  
  archive {
    return(cataARCHIVE);
  }
  
  = {
    return(cataEQUAL);
  }
  
  : {
    return(cataCOLON);
  }
  
  , {
    return(cataCOMMA);
  }
  
  {HASH} {
    strncpy(yylval->hash, yytext, MAX_SIZE_HASH);
    yylval->hash[MAX_SIZE_HASH] = (char)0;
    return(cataHASH);
  }

  [[:digit:]]+ {
    sscanf(yytext, "%llu", &yylval->size);
    return(cataNUMBER);
  }

  {QUOTED_STRING} {
    strncpy(yylval->string, yytext+1, yyleng-2);
    yylval->string[yyleng-2] = (char)0;
    return(cataSTRING);
  }
 }

<Comment>{
  [^\n\r]   /* : eat up any unmatched character */
    
    \*\/ {
    BEGIN(INITIAL);
  }
 }

<*>{

  [[:blank:]]+  /* : eat up any blank character */
  ^#.*$         /* : eat up comments */
  \/\/.*$       /* : eat up comments */
    
  \/\* {
    BEGIN(Comment);
  }
  
  (\n|\r\n) {
    ++env.progBar.cur;
  }

  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
