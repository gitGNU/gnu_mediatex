/*=======================================================================
 * Version: $Id: confFile.l,v 1.6 2015/07/06 16:05:19 nroche Exp $
 * Project: Mediatex
 * Module : conf scanner

 * configuration scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

%top{
/*=======================================================================
 * Version: this file is generated by LEX using confFile.l
 * Project: Mediatex
 * Module : conf scanner

 * configuration scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}

%{
#include "mediatex-config.h"
#include "parser/confFile.tab.h"
%}

/* definitions: ========================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/confFile.c"
%option header-file="parser/confFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="conf_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

 /* scaner states */
%x USERVALUE
%x COLLECTION

 /* No way to use constants from a c header file */

 /* MAX_SIZE_STRING = 511 */
QUOTED_STRING  \"[^\r\n\"]{1,509}\"
STRING         [^[:blank:],\r\n]{1,511}

/* MAX_SIZE_COLL = 20 */
COLL           [^\r\n[:blank:]:\-@]{1,20} 

%%
 /* rules: ==========================================================*/
   
 /* first rule: */
<INITIAL>{

  /* global settings */

  host {
    BEGIN(USERVALUE);
    return(confHOST);
  }

 networks {
    BEGIN(USERVALUE);
    return(confNETWORKS);
  }

 gateways {
    BEGIN(USERVALUE);
    return(confGATEWAYS);
  }

  mdtxport {
    BEGIN(USERVALUE);
    return(confMDTXPORT);
  }

  sshport {
    BEGIN(USERVALUE);
    return(confSSHPORT);
  }

  wwwport {
    BEGIN(USERVALUE);
    return(confWWWPORT);
  }

  cachesize {
    BEGIN(USERVALUE);
    return(confCACHESIZE);
  }

  cachettl {
    BEGIN(USERVALUE);
    return(confCACHETTL);
  }

  queryttl {
    BEGIN(USERVALUE);
    return(confQUERYTTL);
  }

  checkttl {
    BEGIN(USERVALUE);
    return(confCHECKTTL);
  }

  suppttl {
    BEGIN(USERVALUE);
    return(confSUPPTTL);
  }

  maxscore {
    BEGIN(USERVALUE);
    return(confMAXSCORE);
  }

  badscore {
    BEGIN(USERVALUE);
    return(confBADSCORE);
  }

  powsupp {
    BEGIN(USERVALUE);
    return(confPOWSUPP);
  }

  factsupp {
    BEGIN(USERVALUE);
    return(confFACTSUPP);
  }

  comment {
    BEGIN(USERVALUE);
    return(confCOMMENT);
  }

  /* stanzas */

  coll(ection)? {
    BEGIN(COLLECTION);
    return(confCOLL);
  }

  localhost {
    BEGIN(USERVALUE);
    return(confLOCALHOST);
  }

  share {
    BEGIN(USERVALUE);
    return(confSHARE);
  }

  , {
    BEGIN(USERVALUE);
    return(confCOMMA);
  }

  - { 
    BEGIN(COLLECTION);
    return(confMINUS);
  }

  @ { 
    BEGIN(COLLECTION);
    return(confAROBASE);
  }

  : {
    BEGIN(USERVALUE);
    return(confCOLON);
  }

  end(block)? {
    return(confENDBLOCK);
  }

  g(o)? {
    yylval->size = GIGA;
    return(confSIZE);
  }

  m(o)? {
     yylval->size = MEGA;
     return(confSIZE);
  }

  k(o)? {
    yylval->size = KILO;
    return(confSIZE);
  }

  o {
    yylval->size = 1;
    return(confSIZE);
  }

  y(ear)? {
    yylval->time = YEAR;
    return(confTIME);
  }  

  mon(th)? {
    yylval->time = MONTH;
    return(confTIME);
  }

  w(eek)? {
    yylval->time = WEEK;
    return(confTIME);
  }

  d(ay)? {
    yylval->time = DAY;
    return(confTIME);
  }

  h(our)? {
    yylval->time = HOUR;
    return(confTIME);
  }

  min|(nute) {
    yylval->time = MINUTE;
    return(confTIME);
  }

  s(econde)? {
    yylval->time = 1;
    return(confTIME);
  }
 }

 /* Allow to use a value which begin by a token name */
<USERVALUE>{

  [[:digit:]]+\.[[:digit:]]+ {
    BEGIN(INITIAL);
    sscanf(yytext, "%f", &yylval->score);
    return(confSCORE);
  }

  [[:digit:]]+ {
    BEGIN(INITIAL);
    sscanf(yytext, "%u", &yylval->number);
    return(confNUMBER);
  }

  {QUOTED_STRING} {
    BEGIN(INITIAL);
    strncpy(yylval->string, yytext+1, yyleng-2);
    yylval->string[yyleng-2] = (char)0;
    return(confSTRING);
  }

  {STRING} {
    BEGIN(INITIAL);
    strcpy(yylval->string, yytext);
    return(confSTRING);
  }
 }

<COLLECTION>{

  {COLL} {
    BEGIN(INITIAL);
    strcpy(yylval->string, yytext);
    return(confSTRING);
  }
 }

<*>{

  [[:blank:]]+   /* : eat up any blank character */
   #[^\r\n]*     /* : eat up comments */
  (\n|\r\n)      /* : eat up carriage returns */

  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
    return(confERROR);
  }
 }

%%
   /* user code (literally copied to the generated source) :
      ==========*/

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
