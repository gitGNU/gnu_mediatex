/*=======================================================================
 * Version: $Id: confFile.l,v 1.3 2015/06/03 14:03:51 nroche Exp $
 * Project: Mediatex
 * Module : conf scanner

 * configuration scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

/* definitions: ========================================================*/

/* Options for Specifing Filenames: */
%option outfile="confFile.c"
%option header-file="confFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="conf_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

%top{
/*=======================================================================
 * Version: this file is generated by LEX using confFile.l
 * Project: Mediatex
 * Module : conf scanner

 * configuration scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

#include "../mediatex.h"
#include "../misc/log.h"
#include "../memory/strdsm.h"
}

%{
#ifdef utMAIN
#define YYSTYPE void*
#else
#include "confFile.tab.h"
#define YYSTYPE CONF_STYPE
#endif	/*	: utMAIN	*/
%}

 /* scaner states */
%x USERVALUE
%x COLLECTION

%%
 /* rules: ==========================================================*/
   
%{
  /* no local variables: reentrant */
%}

 /* first rule: */
<INITIAL>{

  /* global settings */

  host {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HOST", yylineno);
#else	/*	: utMAIN	*/
    return(confHOST);
#endif	/*	: utMAIN	*/
  }

 networks {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: NETWORKS", yylineno);
#else	/*	: utMAIN	*/
    return(confNETWORKS);
#endif	/*	: utMAIN	*/
  }

 gateways {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: GATEWAYS", yylineno);
#else	/*	: utMAIN	*/
    return(confGATEWAYS);
#endif	/*	: utMAIN	*/
  }

  mdtxport {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MDTXPORT", yylineno);
#else	/*	: utMAIN	*/
    return(confMDTXPORT);
#endif	/*	: utMAIN	*/
  }

  sshport {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: SSHPORT", yylineno);
#else	/*	: utMAIN	*/
    return(confSSHPORT);
#endif	/*	: utMAIN	*/
  }

  cachesize {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: CACHE_SIZE", yylineno);
#else	/*	: utMAIN	*/
    return(confCACHESIZE);
#endif	/*	: utMAIN	*/
  }

  cachettl {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: CACHE_TTL", yylineno);
#else	/*	: utMAIN	*/
    return(confCACHETTL);
#endif	/*	: utMAIN	*/
  }

  queryttl {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: QUERY_TTL", yylineno);
#else	/*	: utMAIN	*/
    return(confQUERYTTL);
#endif	/*	: utMAIN	*/
  }

  checkttl {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: CHECK_TTL", yylineno);
#else	/*	: utMAIN	*/
    return(confCHECKTTL);
#endif	/*	: utMAIN	*/
  }

  suppttl {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: SUPP_TTL", yylineno);
#else	/*	: utMAIN	*/
    return(confSUPPTTL);
#endif	/*	: utMAIN	*/
  }

  maxscore {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MAXSCORE", yylineno);
#else	/*	: utMAIN	*/
    return(confMAXSCORE);
#endif	/*	: utMAIN	*/
  }

  badscore {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: BADSCORE", yylineno);
#else	/*	: utMAIN	*/
    return(confBADSCORE);
#endif	/*	: utMAIN	*/
  }

  powsupp {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: POWSUPP", yylineno);
#else	/*	: utMAIN	*/
    return(confPOWSUPP);
#endif	/*	: utMAIN	*/
  }

  factsupp {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: FACTSUPP", yylineno);
#else	/*	: utMAIN	*/
    return(confFACTSUPP);
#endif	/*	: utMAIN	*/
  }

  comment {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: COMMENT", yylineno);
#else	/*	: utMAIN	*/
    return(confCOMMENT);
#endif	/*	: utMAIN	*/
  }

  /* stanzas */
  coll(ection)? {
    BEGIN(COLLECTION);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: COLL", yylineno);
#else	/*	: utMAIN	*/
    return(confCOLL);
#endif	/*	: utMAIN	*/
  }

  localhost {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: LOCALHOST", 
	    yylineno);
#else	/*	: utMAIN	*/
    return(confLOCALHOST);
#endif	/*	: utMAIN	*/
  }

  share {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: SHARE", yylineno);
#else	/*	: utMAIN	*/
    return(confSHARE);
#endif	/*	: utMAIN	*/
  }

  , {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: COMMA", yylineno);
#else	/*	: utMAIN	*/
    return(confCOMMA);
#endif	/*	: utMAIN	*/
  }

  - { 
    BEGIN(COLLECTION);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MINUS", yylineno);
#else	/*	: utMAIN	*/
    return(confMINUS);
#endif	/*	: utMAIN	*/
  }

  @ { 
    BEGIN(COLLECTION);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: AROBASE", yylineno);
#else	/*	: utMAIN	*/
    return(confAROBASE);
#endif	/*	: utMAIN	*/
  }

  : {
    BEGIN(USERVALUE);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: COLON", yylineno);
#else	/*	: utMAIN	*/
    return(confCOLON);
#endif	/*	: utMAIN	*/
  }

  end(block)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: ENDBLOCK", yylineno);
#else	/*	: utMAIN	*/
    return(confENDBLOCK);
#endif	/*	: utMAIN	*/
  }

  g(o)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: GIGA", yylineno);
#else	/*	: utMAIN	*/
    yylval->size = GIGA;
    return(confSIZE);
#endif	/*	: utMAIN	*/
  }

  m(o)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MEGA", yylineno);
#else	/*	: utMAIN	*/
     yylval->size = MEGA;
     return(confSIZE);
#endif	/*	: utMAIN	*/
  }

  k(o)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: KILO", yylineno);
#else	/*	: utMAIN	*/
    yylval->size = KILO;
    return(confSIZE);
#endif	/*	: utMAIN	*/
  }

  o {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: OCTET", yylineno);
#else	/*	: utMAIN	*/
    yylval->size = 1;
    return(confSIZE);
#endif	/*	: utMAIN	*/
  }

  y(ear)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: YEAR", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = YEAR;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }  

  mon(th)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MONTH", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = MONTH;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }

  w(eek)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: WEEK", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = WEEK;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }

  d(ay)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: DAY", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = DAY;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }

  h(our)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: HOUR", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = HOUR;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }

  min|(nute) {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: MINUTE", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = MINUTE;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }

  s(econde)? {
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: SECONDE", yylineno);
#else	/*	: utMAIN	*/
    yylval->time = 1;
    return(confTIME);
#endif	/*	: utMAIN	*/
  }
 }

 /* Allow to use a value which begin by a token name */
<USERVALUE>{

  [+-]?[[:digit:]^]+\.[+-]?[[:digit:]^]+ {
    BEGIN(INITIAL);
    float score = 0;
    sscanf(yytext, "%f", &score);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: SCORE=  %.2f", 
	    yylineno, score);
#else	/*	: utMAIN	*/
    yylval->score = score;
    return(confSCORE);
#endif	/*	: utMAIN	*/
  }

  [+-]?[[:digit:]^]+ {
    BEGIN(INITIAL);
    unsigned int number = 0;
    number = strtoul(yytext, (char**)0, 10);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: NUMBER=  %i", 
	    yylineno, number);
#else	/*	: utMAIN	*/
    yylval->number = number;
    return(confNUMBER);
#endif	/*	: utMAIN	*/
  }

  \"[^\n\"]*\" { 
    BEGIN(INITIAL);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: ID=     '%s'", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->string, yytext+1, yyleng-2);
    yylval->string[yyleng-2] = (char)0;
    return(confSTRING);
#endif	/*	: utMAIN	*/
  }

  [^[:blank:],\r\n]+ {
    BEGIN(INITIAL);
#ifdef utMAIN
    logEmit(LOG_DEBUG, "line %i: ID=     '%s'", 
	    yylineno, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->string, yytext, yyleng);
    yylval->string[yyleng] = (char)0;
    return(confSTRING);
#endif	/*	: utMAIN	*/
  }
 }

<COLLECTION>{

  [^\n[:blank:]:\-@]* {
    BEGIN(INITIAL);
#ifdef utMAIN
    logEmit(LOG_INFO, "STRING = \"%s\"", yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->string, yytext, yyleng);
    yylval->string[yyleng] = (char)0;
    return(confSTRING);
#endif	/*	: utMAIN	*/
  }
 }

<*>{

  [[:blank:]]+   /* : eat up any blank character */
   #[^\r\n]*     /* : eat up comments */
  (\n|\r\n)      /* : eat up carriage returns */

  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
#ifdef utMAIN
    return -1;
#endif	/*	: utMAIN	*/
  }
 }

%%
   /* user code (literally copied to the generated source) :
      ==========*/

/************************************************************************/

#ifdef utMAIN
#include "../misc/command.h"
GLOBAL_STRUCT_DEF;

/*=======================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program; usually argv[0].
 * Output     : N/A
 =======================================================================*/
static void 
usage(char* programName)
{
  parserUsage(programName);
  fprintf(stderr, " [ -i inputPath ]");

  parserOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --input\t\tinput file to parse\n");
  return;
}

/*=======================================================================
 * Function   : main 
 * Author     : Nicolas ROCHE
 * modif      : 2012/05/01
 * Description: Unit test for confFile module.
 * Synopsis   : utconfFile
 * Input      : N/A
 * Output     : N/A
 =======================================================================*/
int 
main(int argc, char** argv)
{
  char* inputPath = 0;
  FILE* inputStream = stdin;
  yyscan_t scanner;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = PARSER_SHORT_OPTIONS"i:";
  struct option longOptions[] = {
     {"input", required_argument, 0, 'i'},
    PARSER_LONG_OPTIONS,
    {0, 0, 0, 0}
  };
       
  // import mdtx environment
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, 0)) 
	!= EOF) {
    switch(cOption) {
      
    case 'i':
      if(isEmptyString(optarg)) {
	fprintf(stderr, 
		"%s: nil or empty argument for the input stream\n",
		programName);
	rc = 2;
      }
      else {
	if ((inputPath = (char*)malloc(sizeof(char) * strlen(optarg) + 1))
	    == 0) {
	  fprintf(stderr, 
		  "%s: cannot allocate memory for the input stream name\n", 
		  programName);
	  rc = 3;
	}
	else {
	  strcpy(inputPath, optarg);
	}
      }
      break;
		
      GET_PARSER_OPTIONS; // generic options
    }
    if (rc) goto optError;
  }

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;

  /************************************************************************/
  if (conf_lex_init(&scanner)) {
    logEmit(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }

  conf_set_debug(env.debugLexer, scanner);
  logEmit(LOG_DEBUG, "conf_set_debug = %i", conf_get_debug(scanner));
  
  // scan input file if defined
  if (inputPath != 0) {
    if ((inputStream = fopen(inputPath, "r")) == 0) {
      logEmit(LOG_ERR, "cannot open input stream: %s", inputPath); 
      goto error;
    }
  }
  
  // call scanner 
  conf_set_in(inputStream, scanner);
  if (conf_lex(0, scanner)) goto error;
  conf_lex_destroy(scanner);
  fclose(inputStream);
  /************************************************************************/

  destroyString(inputPath);
  rc = TRUE;
 error:
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
}
 
#endif // utMAIN

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
