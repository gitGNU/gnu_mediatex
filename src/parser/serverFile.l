/*=======================================================================
 * Version: $Id: serverFile.l,v 1.9 2015/09/03 13:02:33 nroche Exp $
 * Project: Mediatex
 * Module : server scanner

 * server scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

%top{
/*=======================================================================
 * Version: this file is generated by LEX using serverFile.l
 * Project: Mediatex
 * Module : server scanner

 * server scanner
 
 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}

%{
#include "mediatex-config.h"
#include "parser/serverFile.tab.h"
%}

/* definitions: =======================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/serverFile.c"
%option header-file="parser/serverFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="serv_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

 /* scaner states */
%x COMMENT
%x USERVALUE
%x USERDATE

 /* No way to use constants from a c header file */

 /* MAX_SIZE_HASH = 32 */
HASH           [[:xdigit:]]{32}

 /* MAX_SIZE_STRING = 511 */
STRING         [^[:blank:]:,=\r\n]{1,511}

 /* (MAX_SIZE_STRING+1)*2-1 = 1023 */
QUOTED_STRING  \"[^\r\n\"]{1,1023}\"

YEAR    [[:digit:]]{4}
MONTH   [[:digit:]]{2}
DAY     [[:digit:]]{2}
HOUR    [[:digit:]]{2}
MIN     [[:digit:]]{2}
SEC     [[:digit:]]{2}
DATE    {YEAR}-{MONTH}-{DAY},{HOUR}:{MIN}:{SEC}

%%
 /* rules: ==========================================================*/

 /* first rule: */
<INITIAL>{

  server {
    BEGIN(USERVALUE);
    return(servSERVER);
  }

  label {
    BEGIN(USERVALUE);
    return(servLABEL);
  }

  host {
    BEGIN(USERVALUE);
    return(servHOST);
  }

  lastcommit {
    BEGIN(USERDATE);
    return(servLASTCOMMIT);
  }
  
  networks {
    BEGIN(USERVALUE);
    return(servNETWORKS);
  }

  gateways {
    BEGIN(USERVALUE);
    return(servGATEWAYS);
  }

  mdtxport {
    BEGIN(USERVALUE);
    return(servMDTXPORT);
  }

  sshport {
    BEGIN(USERVALUE);
    return(servSSHPORT);
  }

  wwwport {
    BEGIN(USERVALUE);
    return(servWWWPORT);
  }

  comment {
    BEGIN(USERVALUE);
    return(servCOMMENT);
  }

  master {
    BEGIN(USERVALUE);
    return(servMASTER);
  }

  collKey {
    BEGIN(USERVALUE);
    return(servCOLLKEY);
  }

  userKey {
    BEGIN(USERVALUE);
    return(servUSERKEY);
  }

  hostKey {
    BEGIN(USERVALUE);
    return(servHOSTKEY);
  }

  provide {
    BEGIN(USERVALUE);
    return(servPROVIDE);
  }

  , {
    BEGIN(USERVALUE);
    return(servCOMMA);
  }

  : {
    BEGIN(USERVALUE);
    return(servCOLON);
  } 

  = {
    BEGIN(USERVALUE);
    return(servEQUAL);
  } 

  end(block)? {
    return(servENDBLOCK);
  }

  cachesize {
    BEGIN(USERVALUE);
    return(servCACHESIZE);
  }

  serverttl {
    BEGIN(USERVALUE);
    return(servSERVERTTL);
  }

  cachettl {
    BEGIN(USERVALUE);
    return(servCACHETTL);
  }

  queryttl {
    BEGIN(USERVALUE);
    return(servQUERYTTL);
  }

  suppttl {
    BEGIN(USERVALUE);
    return(servSUPPTTL);
  }

  uploadttl {
    BEGIN(USERVALUE);
    return(servUPLOADTTL);
  }

  maxscore {
    BEGIN(USERVALUE);
    return(servMAXSCORE);
  }

  badscore {
    BEGIN(USERVALUE);
    return(servBADSCORE);
  }

  powsupp {
    BEGIN(USERVALUE);
    return(servPOWSUPP);
  }

  factsupp {
    BEGIN(USERVALUE);
    return(servFACTSUPP);
  }

  filescore {
    BEGIN(USERVALUE);
    return(servFILESCORE);
  }
    
  mingeodup {
    BEGIN(USERVALUE);
    return(servMINGEODUP);
  }

  g(o)? {
    yylval->size = GIGA;
    return(servSIZE);
  }

  m(o)? {
     yylval->size = MEGA;
    return(servSIZE);
  }

  k(o)? {
    yylval->size = KILO;
    return(servSIZE);
  }

  o {
    yylval->size = 1;
    return(servSIZE);
  }

  y(ear)? {
    yylval->time = YEAR;
    return(servTIME);
  }  

  mon(th)? {
    yylval->time = MONTH;
    return(servTIME);
  }

  w(eek)? {
    yylval->time = WEEK;
    return(servTIME);
  }

  [Dd](ay)? {
    yylval->time = DAY;
    return(servTIME);
  }

  h(our)? {
    yylval->time = HOUR;
    return(servTIME);
  }

  min(ute)? {
    yylval->time = MINUTE;
    return(servTIME);
  }

  s(econde)? {
    yylval->time = 1;
    return(servTIME);
  }
 }

 /* Allow to use a value wich begin by a token name */
<USERVALUE>{
  
  {HASH} {
    BEGIN(INITIAL);
    strncpy(yylval->hash, yytext, MAX_SIZE_HASH);
    yylval->hash[MAX_SIZE_HASH] = (char)0;
    return(servHASH);
  }

  [[:digit:]]+\.[[:digit:]]+ {
    BEGIN(INITIAL);
    sscanf(yytext, "%f", &yylval->score);
    return(servSCORE);
  }

  [[:digit:]]+ {
    BEGIN(INITIAL);
    sscanf(yytext, "%llu", (unsigned long long int*) &yylval->number);
    return(servNUMBER);
  }

  {QUOTED_STRING} {
    BEGIN(INITIAL);
    strncpy(yylval->string, yytext+1, yyleng-2);
    yylval->string[yyleng-2] = (char)0;
    return(servSTRING);
  }

  {STRING} {
    BEGIN(INITIAL);
    strcpy(yylval->string, yytext);
    return(servSTRING);
  }
 }

<USERDATE>{
  
  {DATE} {
    BEGIN(INITIAL);
    
    // date conversion into time_t
    struct tm date;
    memset(&date, 0, sizeof(struct tm));
    if (sscanf(yytext, "%d-%d-%d,%d:%d:%d",
	       &date.tm_year, &date.tm_mon, &date.tm_mday,
	       &date.tm_hour, &date.tm_min, &date.tm_sec)
	!= 6) {
      logParser(LOG_ERR, "sscanf: error parsing date %s", yytext);
      return(servERROR);
    }
    date.tm_year -= 1900; // from GNU/Linux burning date
    date.tm_mon -= 1;     // month are managed from 0 to 11 
    date.tm_isdst = -1;   // no informatio available about spring horodation
    if ((yylval->time = mktime(&date)) == -1) {
      logParser(LOG_ERR, "%s", "mktime: error while parsing date");
      return(servERROR);
    }
    return(servDATE);
  }
 }

<INITIAL,USERVALUE,USERDATE>{
    [[:blank:]]+  /* : eat up any blank character */
    ^#.*$         /* : eat up comments */
    \/\/.*$       /* : eat up comments */
    (\n|\r\n)     /* : eat up carriage returns */
    
    \/\* {
      BEGIN(COMMENT);
    }
 }

<COMMENT>{
    [^\n\r]   /* : eat up any unmatched character */

    \*\/ {
      BEGIN(INITIAL);
    }
 } 

<*>{
  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logParser(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
    return(servERROR);
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
