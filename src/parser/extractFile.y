/*=======================================================================
 * Version: $Id: extractFile.y,v 1.3 2015/06/03 14:03:52 nroche Exp $
 * Project: MediaTeX
 * Module : extractFile parser
 *
 * extract parser.

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

/* prologue: =======================================================*/
%{
#include "../mediatex.h"
#include "../misc/log.h"
#include "../misc/locks.h"
#include "../memory/extractTree.h"

// hack because Flex needs YYSTYPE from tab.h and Bison needs yyscan_t from .h
typedef void* yyscan_t;
%}

%union {
  off_t  size;
  char   string[MAX_SIZE_STRING+1];
  char   hash[MAX_SIZE_HASH+1];
  EType  type; 
  Archive* archive;
}

%{
// we need YYSTYPE defined first to include the Flex headers
#include "extractFile.h"

#define LINENO extr_get_lineno(yyscanner)
  
void extr_error(yyscan_t yyscanner, Collection* coll, Container* container,
		const char* message);
%}

%code provides {
/*=======================================================================
 * Version: this file is generated by BISON using extractFile.y
 * Project: MediaTeX
 * Module : extractFile parser
 *
 * extract parser.

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
   
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
   
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
   
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
#include "../memory/extractTree.h"
int parseExtractFile(Collection* coll, const char* path);
}

/* declarations: ===================================================*/
%defines "extractFile.tab.h"
%output "extractFile.tab.c"
%define api.prefix {extr_}
%define api.pure full
%param {yyscan_t yyscanner}
%parse-param {Collection* coll} {Container* container}
%define parse.error verbose
%verbose
%debug
  
%start file

%token            extOPEN
%token            extCLOSE
%token <type>     extTYPE
%token            extIMPLIES
%token            extAS
%token <hash>     extHASH
%token            extCOLON
%token <size>     extSIZE
%token            extCOMMA
%token <string>   extSTRING

%type  <archive>  archive

%%

/* grammar rules: ==================================================*/

file: stanzas
    | //empty file
{
  logParser(LOG_WARNING, "%s", "the extract file was empty");
}
;

stanzas: stanzas stanza
       | stanza
       ;

stanza: extOPEN container parents extIMPLIES childs extCLOSE
      | extOPEN container extIMPLIES childs extCLOSE
      | extOPEN container extCLOSE
;

container: extTYPE archive
{
  if (!(container = addContainer(coll, $1, $2))) YYERROR;
}
;

parents: parents parent
       | parent
;

childs: childs child
      | child
;

parent: archive 
{
  if (!addFromArchive(coll, container, $1)) YYERROR;
}
;

child: archive extSTRING
{
  if (!(addFromAsso(coll, $1, container, $2))) YYERROR;
}
;

archive: extHASH extCOLON extSIZE
{
  if (!($$ = addArchive(coll, $1, $3))) YYERROR;
}
;

%%

/* epilogue: =======================================================*/


/*=======================================================================
 * Function   : parsererror
 * Description: Emit an error message. Called by the parser on error
 *              state.
 * Synopsis   : void parsererror(char* message)
 * Input      : char* message = the error message.
 * Output     : N/A
 =======================================================================*/
void extr_error(yyscan_t yyscanner, Collection* coll,
		Container* container, const char* message)
{
  logEmit(LOG_ERR, "%s on token '%s' line %i\n",
	  message, extr_get_text(yyscanner), LINENO);
}


/*=======================================================================
 * Function   : parseExtractList
 * Description: Parse a file
 * Synopsis   : int parseExtractList(const char* path, int debugFlag)
 * Input      : const char* path: the file to parse
 * Output     : TRUE on success
=======================================================================*/
int parseExtractFile(Collection* coll, const char* path)
{ 
  int rc = FALSE;
  FILE* inputStream = stdin;
  yyscan_t scanner;
  Container* container = 0;

  checkCollection(coll);
  logParser(LOG_INFO, "parse %s extraction data", coll->label);

  // initialise scanner
  if (extr_lex_init(&scanner)) {
    logEmit(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }

  // scan input file if defined (else stdin)
  inputStream = stdin;
  if (path != 0) {
    if (!(inputStream = fopen(path, "r"))) {
      logEmit(LOG_ERR, "cannot open input stream: %s", path); 
      goto error;
    }
    if (!lock(fileno(inputStream), F_RDLCK)) goto error;
    logEmit(LOG_DEBUG, "parse extraction file: %s", path);
  }
  extr_set_in(inputStream, scanner);

  // debug mode for scanner
  extr_set_debug(env.debugLexer, scanner);
  logEmit(LOG_DEBUG, "extr_set_debug = %i", extr_get_debug(scanner));

  // call the parser
  if (extr_parse(scanner, coll, container)) {
    logEmit(LOG_ERR, "extract file parser error on line %i",
	    extr_get_lineno(scanner));
    logEmit(LOG_ERR, "please edit %s", path);
    goto error;
  }

  if (inputStream != stdin) {
    if (!unLock(fileno(inputStream))) goto error;
    fclose(inputStream);
  }
  rc = TRUE;
 error:
  if (!rc) {
    logEmit(LOG_ERR, "%s", "extract file parser error");
  }
  extr_lex_destroy(scanner);
  return rc;
}

/************************************************************************/

#ifdef utMAIN
#include "../misc/command.h"
#include "confFile.tab.h"
GLOBAL_STRUCT_DEF;

/*=======================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program; usually argv[0].
 * Output     : N/A
 =======================================================================*/
static void 
usage(char* programName)
{
  parserUsage(programName);
  fprintf(stderr, " [ -i inputPath ]");
    
  parserOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --input\t\tinput file to parse\n");
  return;
}


/*=======================================================================
 * Function   : main 
 * Author     : Nicolas ROCHE
 * modif      : 2012/05/01
 * Description: unit test the the extract parser
 * Synopsis   : ./utextractFile.tab
 * Input      : -i inputPath
 * Output     : Should display the same content
 =======================================================================*/
int 
main(int argc, char** argv)
{
  Configuration* conf = (Configuration*)conf;
  Collection* coll = 0;
  char* inputPath = 0;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = PARSER_SHORT_OPTIONS"i:";
  struct option longOptions[] = {
     {"input", required_argument, 0, 'i'},
    PARSER_LONG_OPTIONS,
    {0, 0, 0, 0}
  };

  // import mdtx environment
  env.debugParser = TRUE;
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, 0)) 
	!= EOF) {
    switch(cOption) {
      
    case 'i':
      if(isEmptyString(optarg)) {
	fprintf(stderr, 
		"%s: nil or empty argument for the input stream\n",
		programName);
	rc = 2;
      }
      else {
	if ((inputPath = (char*)malloc(sizeof(char) * strlen(optarg) + 1))
	    == 0) {
	  fprintf(stderr, 
		  "%s: cannot allocate memory for the input stream name\n", 
		  programName);
	  rc = 3;
	}
	else {
	  strcpy(inputPath, optarg);
	}
      }
      break;
		
      GET_PARSER_OPTIONS; // generic options
    }
    if (rc) goto optError;
  }

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;

  /************************************************************************/
  if (!(conf = getConfiguration())) goto error;
  if (!parseConfiguration(conf->confFile)) goto error;
  if (!(coll = getCollection("coll1"))) goto error;
  if (!expandCollection(coll)) goto error;

  if (!parseExtractFile(coll, inputPath)) goto error;
  if (!serializeExtractTree(coll)) goto error;
  /************************************************************************/

  rc = TRUE;
 error:
  freeConfiguration();
  destroyString(inputPath);
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
}
 
#endif // utMAIN

/* Local Variables: */
/* mode: c *//* mode: font-lock */
/* mode: auto-fill */
/* End: */
