/*=======================================================================
 * Version: $Id: supportFile.l,v 1.6 2015/07/03 17:37:32 nroche Exp $
 * Project: Mediatex
 * Module : support scanner

 * support scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

%top{
/*=======================================================================
 * Version: this file is generated by LEX using supportFile.l
 * Project: Mediatex
 * Module : support scanner

 * support scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}

%{
#include "mediatex-config.h"
#include "parser/supportFile.tab.h"
%}

/* definitions: =======================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/supportFile.c"
%option header-file="parser/supportFile.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="supp_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

 /* scaner states */
%x STATE2
%x STATE3
   
 /* No way to use constants from a c header file */

YEAR    [[:digit:]]{4}
MONTH   [[:digit:]]{2}
DAY     [[:digit:]]{2}
HOUR    [[:digit:]]{2}
MIN     [[:digit:]]{2}
SEC     [[:digit:]]{2}
DATE    {YEAR}-{MONTH}-{DAY},{HOUR}:{MIN}:{SEC}

 /* MAX_SIZE_HASH = 32 */
HASH    [[:xdigit:]]{32}

 /* MAX_SIZE_STAT = 10 */
STATUS  [^[:blank:]\r\n]{1,10}

 /* MAX_SIZE_NAME = 64 */
NAME    [^[:blank:]\r\n]{1,64}

%%
 /* rules: ==========================================================*/

 /* first rule: */
<INITIAL>{

  {DATE} {
    // date conversion into time_t
    struct tm date;
    memset(&date, 0, sizeof(struct tm));
    if (sscanf(yytext, "%d-%d-%d,%d:%d:%d",
	       &date.tm_year, &date.tm_mon, &date.tm_mday,
	       &date.tm_hour, &date.tm_min, &date.tm_sec)
	!= 6) {
      logEmit(LOG_ERR, "sscanf: error parsing date %s", yytext);
      return(suppERROR);
    }
    date.tm_year -= 1900; // from GNU/Linux burning date
    date.tm_mon -= 1;     // month are managed from 0 to 11 
    date.tm_isdst = -1;   // no informatio available about spring horodation
    if ((yylval->time = mktime(&date)) == -1) {
      logEmit(LOG_ERR, "%s", "mktime: error while parsing date");
      return(suppERROR);
    }
    return(suppDATE);
  }
  
  {HASH} {
    strcpy(yylval->hash, yytext);
    return(suppHASH);
  }
  
  [[:digit:]]+ {
    BEGIN(STATE2);
    sscanf(yytext, "%llu", (unsigned long long int*)&yylval->size);
    return(suppSIZE);
    }
}

<STATE2>{
  {STATUS} {
    BEGIN(STATE3);
    strcpy(yylval->status, yytext);
    return(suppSTATUS);
  }
 }

<STATE3>{
  {NAME} {
    BEGIN(INITIAL);
    strcpy(yylval->name, yytext);
    return(suppNAME);
  }
 } 

<INITIAL,STATE2,STATE3>{
  [[:blank:]]+  /* : eat up any blank character */
    ^#.*$         /* : eat up comments */
    \/\/.*$       /* : eat up comments */
    
  (\n|\r\n) {    /* : eat up carriage returns */
    BEGIN(INITIAL);
  }
 }

<*>{
  . { /* : eat up any unmatched character and 
	 let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
    return(suppERROR);
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
