/*=======================================================================
 * Version: $Id: supportFile.l,v 1.1 2014/10/13 19:39:49 nroche Exp $
 * Project: Mediatex
 * Module : supportFile scanner

 * support scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014  Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

/* definitions: ====================================================*/

/* Options for Specifing Filenames: */
%option outfile="supportFile.c"
%option header-file="supportFile.h"

/* Options Affecting Scanner Behavior: */
%option nocase-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap

/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant
%option bison-bridge
%option noc++
%option pointer
%option prefix="supp_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput

%top{
/*=======================================================================
 * Version: this file is generated by LEX using supportFile.l
 * Project: Mediatex
 * Module : supportFile scanner

 * support scanner
 * Note : the numerical constants need to be changed manually

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014  Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "../mediatex.h"
#include "../misc/log.h"
#include "../memory/strdsm.h"

#ifndef utMAIN
#include "supportFile.tab.h"
#endif	/*	: utMAIN	*/

typedef struct SuppExtra {
  int            lineNo;
  // nothing more needed into the scanner
} SuppExtra;

// %union{} used by flex/bison to write/read values
// (only available when linked with bison)
typedef union SuppBisonUnion {
  off_t  size;
  time_t time;
  char   hash[MAX_SIZE_HASH+1];
  char   status[MAX_SIZE_STAT+1];
  char   name[MAX_SIZE_NAME+1];
} SuppBisonUnion;

#define YYSTYPE SuppBisonUnion
#define YY_NO_INPUT // no warning
}

%{
  /* no local variables: reentrant */
%}

 /* scaner states */
%x STATE2
%x STATE3

YEAR    [[:digit:]]{4}
MONTH   [[:digit:]]{2}
DAY     [[:digit:]]{2}
HOUR    [[:digit:]]{2}
MIN     [[:digit:]]{2}
SEC     [[:digit:]]{2}
DATE    {YEAR}-{MONTH}-{DAY},{HOUR}:{MIN}:{SEC}

 /* Constants are not allowed there so we do it with yyless
    into the rules */

 /* MAX_SIZE_HASH = 32 */
HASH    [[:xdigit:]]{32}

 /* MAX_SIZE_STAT = 10 */
STATUS  [^[:blank:]\r\n]+

 /* MAX_SIZE_NAME = 64 */
NAME    [^[:blank:]\r\n]+

%%
   /* rules: ==========================================================*/
   /* first rule: */

<INITIAL>{

  {DATE} {
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: DATE = %s", 
	    ((SuppExtra*)yyextra)->lineNo, yytext);
#else	/*	: utMAIN	*/
    // date conversion into time_t
    struct tm date;
    memset(&date, 0, sizeof(struct tm));
    if (sscanf(yytext, "%d-%d-%d,%d:%d:%d",
	       &date.tm_year, &date.tm_mon, &date.tm_mday,
	       &date.tm_hour, &date.tm_min, &date.tm_sec)
	!= 6) {
      logEmit(LOG_ERR, "sscanf: error parsing date %s", yytext);
      return(suppERROR);
    }
    date.tm_year -= 1900; // from GNU/Linux burning date
    date.tm_mon -= 1;     // month are managed from 0 to 11 
    date.tm_isdst = -1;   // no informatio available about spring horodation
    if ((yylval->time = mktime(&date)) == -1) {
      logEmit(LOG_ERR, "%s", "mktime: error parsing date");
      return(suppERROR);
    }
    return(suppDATE);
#endif	/*	: utMAIN	*/
  }
  
  {HASH} {
    // force to take 32 char
    // else the ending digit are taken by the=
    //if (yyleng != MAX_SIZE_HASH) yyless(MAX_SIZE_HASH);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: HASH = %s", 
	    ((SuppExtra*)yyextra)->lineNo, yytext);
#else	/*	: utMAIN	*/
    // Maybe need to do a tric with sscanf here -> uchar[12]
    strncpy(yylval->hash, yytext, MAX_SIZE_HASH);
    yylval->hash[MAX_SIZE_HASH] = (char)0;
    return(suppHASH);
#endif	/*	: utMAIN	*/
  }
  
  [[:digit:]]+ {
    off_t size = 0;
    BEGIN(STATE2);
    sscanf(yytext, "%llu", (unsigned long long int*)&size);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: SIZE = %lli", 
	    ((SuppExtra*)yyextra)->lineNo, size);
#else	/*	: utMAIN	*/
    yylval->size = size;
    return(suppSIZE);
#endif	/*	: utMAIN	*/
    }
}

<STATE2>{
  {STATUS} {
    BEGIN(STATE3);
    if (yyleng > MAX_SIZE_STAT) yyless(MAX_SIZE_STAT);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: STATUS = \%s", 
	    ((SuppExtra*)yyextra)->lineNo, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->status, yytext, yyleng);
    yylval->status[yyleng] = (char)0;
    return(suppSTATUS);
#endif	/*	: utMAIN	*/
  }
 }

<STATE3>{
  {NAME} {
    BEGIN(INITIAL);
    if (yyleng > MAX_SIZE_NAME) yyless(MAX_SIZE_NAME);
#ifdef utMAIN
    logEmit(LOG_INFO, "line %i: NAME = \%s", 
	    ((SuppExtra*)yyextra)->lineNo, yytext);
#else	/*	: utMAIN	*/
    strncpy(yylval->name, yytext, yyleng);
    yylval->name[yyleng] = (char)0;
    return(suppNAME);
#endif	/*	: utMAIN	*/
  }
 } 

<INITIAL,STATE2,STATE3>{
  [[:blank:]]+  /* : eat up any blank character */
    ^#.*$         /* : eat up comments */
    \/\/.*$       /* : eat up comments */
    
  (\n|\r\n) {
    BEGIN(INITIAL);
    ++((SuppExtra*)yyextra)->lineNo;
  }
 }

<*>{
  . { /* : eat up any unmatched character */
    
    logEmit(LOG_ERR, "line %i: exit on scanner error: %s", 
	    ((SuppExtra*)yyextra)->lineNo, yytext);
    
#ifdef utMAIN
    logEmit(LOG_ERR, "%s", "ERROR");
    return -1;
#else	/*	: utMAIN	*/
    return(suppERROR);
#endif	/*	: utMAIN	*/
  }
 }
   
%%
   /* user code (literally copied to the generated source) :
      ==========*/

/************************************************************************/

#ifdef utMAIN
#include "../misc/command.h"
GLOBAL_STRUCT_DEF;

/*=======================================================================
 * Function   : usage
 * Description: Print the usage.
 * Synopsis   : static void usage(char* programName)
 * Input      : programName = the name of the program; usually argv[0].
 * Output     : N/A
 =======================================================================*/
static void 
usage(char* programName)
{
  parserUsage(programName);
  fprintf(stderr, " [ -i inputFile ]");

  parserOptions();
  fprintf(stderr, "  ---\n"
	  "  -i, --input\t\tinput file to parse\n");
  return;
}

/*=======================================================================
 * Function   : main 
 * Author     : Nicolas ROCHE
 * modif      : 2012/05/01
 * Description: LocalSupp lexer unit test
 * Synopsis   : ./utsupportFile
 * Input      : stdin
 * Output     : stdout
 =======================================================================*/
int 
main(int argc, char** argv)
{
  char* inputPath = NULL;
  FILE* inputStream = stdin;
  SuppExtra extra;
  yyscan_t scanner;
  // ---
  int rc = 0;
  int cOption = EOF;
  char* programName = *argv;
  char* options = PARSER_SHORT_OPTIONS"i:";
  struct option longOptions[] = {
     {"input", required_argument, NULL, 'i'},
    PARSER_LONG_OPTIONS,
    {0, 0, 0, 0}
  };

  // import mdtx environment
  getEnv(&env);

  // parse the command line
  while((cOption = getopt_long(argc, argv, options, longOptions, NULL)) 
	!= EOF) {
    switch(cOption) {
      
    case 'i':
      if(isEmptyString(optarg)) {
	fprintf(stderr, 
		"%s: nil or empty argument for the input stream\n",
		programName);
	rc = 2;
      }
      else {
	if ((inputPath = (char*)malloc(sizeof(char) * strlen(optarg) + 1))
	    == NULL) {
	  fprintf(stderr, 
		  "%s: cannot allocate memory for the input stream name\n", 
		  programName);
	  rc = 3;
	}
	else {
	  strcpy(inputPath, optarg);
	}
      }
      break;
		
      GET_PARSER_OPTIONS; // generic options
    }
    if (rc) goto optError;
  }

  // export mdtx environment
  if (!setEnv(programName, &env)) goto optError;

  /************************************************************************/
  if (supp_lex_init(&scanner)) {
    logEmit(LOG_ERR, "%s", "error initializing scanner");
    goto error;
  }

  supp_set_debug(env.debugLexer, scanner);
  logEmit(LOG_DEBUG, "supp_set_debug = %i", supp_get_debug(scanner));
 
  
  // scan input file if defined
  if (inputPath != NULL) {
    if ((inputStream = fopen(inputPath, "r")) == NULL) {
      logEmit(LOG_ERR, "cannot open input stream: %s", inputPath); 
      goto error;
    }
  }

  // call scanner 
  extra.lineNo = 1;
  supp_set_extra (&extra, scanner);
  supp_set_in(inputStream, scanner);
  if (supp_lex(NULL, scanner)) goto error;
  supp_lex_destroy(scanner);
  fclose(inputStream);
  /************************************************************************/

  destroyString(inputPath);
  rc = TRUE;
 error:
  ENDINGS;
  rc=!rc;
 optError:
  exit(rc);
}
 
#endif // utMAIN

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
