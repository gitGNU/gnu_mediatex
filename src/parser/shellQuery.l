/*=======================================================================
 * Version: $Id: shellQuery.l,v 1.3 2015/07/03 17:37:32 nroche Exp $
 * Project: Mediatex
 * Module : shell scanner

 * shell scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/

%top {
/*=======================================================================
 * Version: this file is generated by LEX using shellQuery.l
 * Project: Mediatex
 * Module : shell scanner

 * shell scanner

 MediaTex is an Electronic Records Management System
 Copyright (C) 2014 2015 Nicolas Roche
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
=======================================================================*/

#include "mediatex-types.h" // needed for off_t set on 64 bits
}
   
%{
#include "mediatex-config.h"
#include "parser/shellQuery.tab.h"
%}

/* definitions: ====================================================*/

/* Options for Specifing Filenames: */
%option outfile="parser/shellQuery.c"
%option header-file="parser/shellQuery.h"

/* Options Affecting Scanner Behavior: */
%option case-insensitive
%option nolex-compat
/* option batch OU interactive */
%option batch
%option 8bit
%option noposix-compat
%option nostdinit
%option noyywrap
%option yylineno
   
/* Code-Level And API Options: */
%option ansi-definitions
%option ansi-prototypes
%option reentrant 
%option bison-bridge
%option noc++
%option pointer
%option prefix="shell_"
%option nomain
%option unistd

/* Options for Scanner Speed and Size: */
%option noalign
%option ecs
%option nometa-ecs
%option noread

/* Debugging Options: */
%option nobackup
%option debug
%option noperf-report
%option warn

/* Miscellaneous Options: */
%option nounput
%option noinput

 /* scaner states */
%x COMMENT
%x USERVALUE
%x COLLECTION

%%
   /* rules: ==========================================================*/

 /* first rule: */
<INITIAL>{

	^#.*$         /* : eat up comments */
	\/\/.*$       /* : eat up comments */

	\/\* {
	  BEGIN(COMMENT);
	}

	(\n|\r\n) {
	  return(shellEOL);
	}

	/* objects */

	coll(ection)? {
	  BEGIN(COLLECTION);
	  return(shellCOLL);
	}

	supp(ort)? {
	  BEGIN(USERVALUE);
	  return(shellSUPP);
	}

	key {
	  BEGIN(USERVALUE);
	  return(shellKEY);
	}

	user {
	  BEGIN(USERVALUE);
	  return(shellUSER);
	}

	bind {
	  return(shellBIND);
	}

	unbind {
	  return(shellUNBIND);
	}

	mount {
	  BEGIN(USERVALUE);
	  return(shellMOUNT);
	}

	umount {
	  BEGIN(USERVALUE);
	  return(shellUMOUNT);
	}

	upload {
	  BEGIN(USERVALUE);
	  return(shellUPLOAD);
	}

	get {
	  BEGIN(USERVALUE);
	  return(shellGET);
	}

	/* prefixs */

	adm(in)? {
	  return(shellADMIN);
	}

	(srv|serv|server) {
	  return(shellSERVER);
	}

	/* locutions */

	all {
	  return(shellALL);
	}

	to {
	  return(shellTO);
	}

	from {
	  return(shellFROM);
	}

	as {
	  BEGIN(USERVALUE);
	  return(shellAS);
	}

	on {
	  BEGIN(USERVALUE);
	  return(shellON);
	}

	/* conf orders */

	init(ialize)? {
	  return(shellINIT);
	}

	remove {
	  return(shellREMOVE);
	}

	purge {
	  return(shellPURGE);
	}

	clean {
	  return(shellCLEAN);
	}

	add {
	  return(shellADD);
	}

	del(ete)? {
	  return(shellDEL);
	}

	note {
	  return(shellNOTE);
	}

	l(s|ist) {
	  return(shellLIST);
	}

	update? {
	  return(shellUPDATE);
	}

	up(grade)? {
	  return(shellUPGRADE);
	}

	commit {
	  return(shellCOMMIT);
	}

	make {
	  return(shellMAKE);
	}

	check {
	  return(shellCHECK);
	}

	su {
	  return(shellSU);
	}

	motd {
	  return(shellMOTD);
	}

	save {
	  return(shellSAVE);
	}

	extract {
	  return(shellEXTRACT);
	}

	notify {
	  return(shellNOTIFY);
	}

	deliver {
	  return(shellDELIVER);
	}

	@ {
	  BEGIN(COLLECTION);
	  return(shellAROBASE);
	}

	- {
	  BEGIN(COLLECTION);
	  return(shellMINUS);
	}
	
	: {
	  BEGIN(USERVALUE);
	  return(shellCOLON);
	}
 }

<USERVALUE>{

	/* string */

  (\n|\r\n) {
    BEGIN(INITIAL);
    return(shellEOL);
  }

  [+-]?[[:digit:]]+ {
    BEGIN(INITIAL);
    sscanf(yytext, "%i", &yylval->number);
    return(shellNUMBER);
  }

  [^\n[:blank:]]* {
    BEGIN(INITIAL);
    strcpy(yylval->string, yytext);
    return(shellSTRING);
  }
 }

<COLLECTION>{

  (\n|\r\n) {
    BEGIN(INITIAL);
    return(shellEOL);
  }

  [^\n[:blank:]:\-@]* {
    BEGIN(INITIAL);
    strcpy(yylval->string, yytext);
    return(shellSTRING);
  }
 }

<COMMENT>{
  [^\n\r]   /* : eat up any unmatched character */
    
  \*\/ {
    BEGIN(INITIAL);
  }
}

<*>{

  [[:blank:]]+  /* : eat up any blank character */

  . {  /* : eat up any unmatched character and 
	  let bison manage the errors */
    logEmit(LOG_WARNING, "line %i: scanner read unexpected caractere '%s'", 
	    yylineno, yytext);
    return(shellERROR);
  }
}

%%
   /* user code (literally copied to the generated source) :
      ==========*/


/*=======================================================================
 * Function   : getCommandLine
 * Description: scan the command line (without options)
 * Synopsis   : int getCommandLine(int argc, char** argv, int optind)
 * Input      : int argc, char** argv, int optind
 * Output     : set the commandLine global variable
 *              TRUE on success
 * Note       : remind to protect \" in cmdline
=======================================================================*/
int getCommandLine(int argc, char** argv, int optind)
{
  int rc = FALSE;
  int i = 0;
  int lenght = 0;
  char* ptr = env.commandLine;

  logEmit(LOG_DEBUG, "%s", "getCommandLine"); 
  for (i=optind; i<argc; ++i) {
    lenght = strlen(argv[i]);
    strcpy(ptr, argv[i]);
    ptr += lenght;
    *(ptr++) = ' ';
  }
  *(ptr) = (char)0;
  if (ptr == env.commandLine) goto error;
  logEmit(LOG_DEBUG, "command line: %s", env.commandLine);
  *(--ptr) = '\n';
  rc = TRUE;

 error:
  if (!rc) {
    logEmit(LOG_WARNING, "%s", "empty comand line");
  }
  return rc;
} 

/* Local Variables: */
/* mode: c */
/* mode: font-lock */
/* mode: auto-fill */
/* End: */
